{"version":3,"sources":["webpack://dashjs/webpack/universalModuleDefinition","webpack://dashjs/webpack/bootstrap","webpack://dashjs/./src/streaming/constants/Constants.js","webpack://dashjs/./src/core/Utils.js","webpack://dashjs/./src/core/events/EventsBase.js","webpack://dashjs/./src/core/errors/ErrorsBase.js","webpack://dashjs/./node_modules/process/browser.js","webpack://dashjs/./src/core/FactoryMaker.js","webpack://dashjs/./node_modules/path-browserify/index.js","webpack://dashjs/./src/streaming/vo/metrics/HTTPRequest.js","webpack://dashjs/./src/streaming/protection/CommonEncryption.js","webpack://dashjs/./src/streaming/protection/vo/MediaCapability.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemConfiguration.js","webpack://dashjs/./src/streaming/protection/errors/ProtectionErrors.js","webpack://dashjs/./src/streaming/protection/vo/LicenseRequest.js","webpack://dashjs/./src/streaming/protection/vo/LicenseResponse.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionController.js","webpack://dashjs/./src/streaming/protection/vo/KeyPair.js","webpack://dashjs/./src/streaming/protection/vo/ClearKeyKeySet.js","webpack://dashjs/./src/streaming/constants/ProtectionConstants.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemW3CClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemWidevine.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemPlayReady.js","webpack://dashjs/./src/streaming/protection/servers/DRMToday.js","webpack://dashjs/./src/streaming/protection/servers/PlayReady.js","webpack://dashjs/./src/streaming/protection/servers/Widevine.js","webpack://dashjs/./src/streaming/protection/servers/ClearKey.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionKeyController.js","webpack://dashjs/./src/streaming/protection/ProtectionEvents.js","webpack://dashjs/./src/streaming/protection/vo/NeedKey.js","webpack://dashjs/./src/streaming/protection/vo/KeyMessage.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemAccess.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_21Jan2015.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_3Feb2014.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_01b.js","webpack://dashjs/./src/streaming/protection/Protection.js","webpack://dashjs/./src/streaming/vo/DashJSError.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","constants","this","init","STREAM","VIDEO","AUDIO","TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","ABR_FETCH_THROUGHPUT_CALCULATION_AAST","LIVE_CATCHUP_MODE_DEFAULT","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SELECTION_MODE_FIRST_TRACK","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","TRACK_SELECTION_MODE_WIDEST_RANGE","TRACK_SELECTION_MODE_HIGHEST_SELECTION_PRIORITY","CMCD_MODE_QUERY","CMCD_MODE_HEADER","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","VIDEO_ELEMENT_READY_STATES","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","Utils","dest","source","copy","empty","mixin","src","Array","length","push","clone","url","params","modifiedUrl","URL","forEach","param","searchParams","set","href","e","headerStr","headers","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","dt","Date","getTime","replace","Math","random","floor","toString","string","hash","charCodeAt","originalUrl","targetUrl","original","target","protocol","origin","relativePath","path","relative","pathname","substr","lastIndexOf","startIndexOffset","EventsBase","events","config","override","publicOnly","evt","ErrorsBase","errors","err","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","getSingletonInstance","context","className","obj","getFactoryByName","factoriesArray","updateFactory","merge","classConstructor","classInstance","__dashjs_factory_name","extensionObject","extension","prop","parent","getClassName","extend","childInstance","setSingletonInstance","deleteSingletonInstances","filter","x","getSingletonFactory","undefined","getInstance","getSingletonFactoryByName","updateSingletonFactory","getClassFactory","getClassFactoryByName","updateClassFactory","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","xs","f","res","resolve","resolvedPath","resolvedAbsolute","TypeError","charAt","join","normalize","isAbsolute","trailingSlash","paths","slice","from","to","arr","start","end","fromParts","toParts","min","samePartsLength","outputParts","sep","delimiter","dirname","code","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","HTTPRequest","tcpid","type","actualurl","range","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_quality","_responseHeaders","_serviceLocation","HTTPRequestTrace","b","GET","HEAD","MPD_TYPE","XLINK_EXPANSION_TYPE","INIT_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","MSS_FRAGMENT_INFO_SEGMENT_TYPE","DVB_REPORTING_TYPE","LICENSE","OTHER_TYPE","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","pssh","offset","view","DataView","getUint8","getUint32","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","boxStart","byteLength","val","mediaInfo","licenseServer","info","contentProtection","targetProtectionData","j","ckData","k","attribute","prefix","__prefix","MediaCapability","contentType","robustness","KeySystemConfiguration","audioCapabilities","videoCapabilities","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","protectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","KEY_SESSION_CREATED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","LicenseRequest","method","responseType","withCredentials","messageType","sessionId","LicenseResponse","ProtectionController","logger","pendingKeySystemData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","selectedKeySystem","keySystemSelectionInProgress","licenseRequestFilters","licenseResponseFilters","protectionKeyController","protectionModel","eventBus","debug","needkeyRetries","cmcdModel","settings","checkConfig","_selectKeySystem","supportedKS","fromManifest","ksIdx","findIndex","entry","ks","current","_loadOrCreateKeySession","_initiateWithExistingKeySystem","keySystemAccess","requestedKeySystems","keySystemConfiguration","_getKeySystemConfiguration","configs","protData","requestKeySystemAccess","then","event","selectedSystemString","mksa","systemString","selectKeySystem","trigger","KEY_SYSTEM_SELECTED","_getProtDataForKeySystem","serverCertificate","setServerCertificate","error","DashJSError","ProtectionErrors","_selectInitialKeySystem","keySystemInfo","isClearKey","kids","keys","clearkeys","TextEncoder","encode","JSON","stringify","loadKeySession","createKeySession","initDataForKS","getPSSHForKeySystem","keyId","sessions","getSessions","getKeyId","_isKeyIdDuplicate","_isInitDataDuplicate","KEY_SESSION_CREATED","message","keySystemString","currentInitData","getAllInitData","initDataEquals","setMediaElement","element","NEED_KEY","_onNeedKey","keySystemData","audioRobustness","videoRobustness","ksSessionType","media","codec","_onKeyStatusChanged","KEY_STATUSES_CHANGED","status","_onKeyMessage","keyMessage","KEY_MESSAGE","sessionToken","licenseServerModelInstance","getLicenseServerModelInstance","eventData","getSessionId","_sendLicenseRequestCompleteEvent","processClearKeyLicenseRequest","updateKeySession","licenseServerData","serverURL","laURL","getLicenseServerUrlFromMediaInfo","schemeIdURI","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","_getLicenseServerUrl","reqHeaders","_updateHeaders","httpRequestHeaders","headersFromMessage","getRequestHeadersFromMessage","onLoad","xhr","responseHeaders","parseHttpHeaders","getAllResponseHeaders","licenseResponse","responseURL","response","_applyFilters","licenseMessage","getLicenseMessage","_reportError","onAbort","statusText","readyState","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","getResponseType","isNaN","httpTimeout","licenseRequest","retryAttempts","streaming","_doLicenseRequest","request","retriesCount","XMLHttpRequest","cmcd","enabled","Constants","cmcdParams","getQueryParameter","addAditionalQueryParameterToUrl","open","setRequestHeader","cmcdHeaders","getHeaderParameters","header","_retryRequest","retryInterval","retryIntervals","onload","warn","ontimeout","onerror","onabort","LICENSE_REQUEST_SENDING","payload","send","_issueLicenseRequest","LICENSE_REQUEST_COMPLETE","errorMsg","getErrorResponse","filters","reduce","prev","next","Promise","retry","protection","ignoreEmeEncryptedEvent","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","Uint8Array","getSupportedKeySystemsFromSegmentPssh","initializeForMedia","getSupportedKeySystemsFromContentProtection","sort","ksA","ksB","priority","clearMediaInfoArray","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","setLicenseResponseFilters","stop","reset","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_STATUS_CHANGED","retryTimeout","getLogger","KeyPair","keyID","ClearKeyKeySet","keyPairs","numKeys","jwk","kty","alg","kid","jwkString","buf","bView","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","PLAYREADY_RECOMMENDATION_KEYSTEM_STRING","INITIALIZATION_DATA_TYPE_CENC","INITIALIZATION_DATA_TYPE_KEYIDS","INITIALIZATION_DATA_TYPE_WEBM","ProtectionConstants","KeySystemClearKey","getInitData","cencContentProtection","parseInitDataFromContentProtection","cencDefaultKid","btoa","match","map","a","parseInt","cencDefaultKidToBase64Representation","parse","getCDMData","getClearKeysFromProtectionData","protectionData","clearkeySet","jsonMsg","clearkeyID","clearkey","dashjs","KeySystemW3CClearKey","KeySystemWidevine","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","pro","prheader","setUint32","msg","xmlDoc","parser","DOMParser","dataview","Uint16Array","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","_cdmData","customData","cdmData","cdmDataBytes","setPlayReadyMessageFormat","format","DRMToday","license","keySystemStr","serverResponse","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","errorString","Widevine","ClearKey","keypair","keyid","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_getSessionId","_getSessionType","initialize","protectionDataSet","initData1","initData2","data1","data2","newKeySystems","getKeySystemBySystemString","cpIdx","findCencContentProtection","setConfig","protectionEvents","KEY_ADDED","KEY_ERROR","KEY_SESSION_CLOSED","KEY_SESSION_REMOVED","KEY_SYSTEM_ACCESS_COMPLETE","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","KEY_SESSION_UPDATED","NeedKey","KeyMessage","defaultURL","KeySystemAccess","ksConfiguration","SYSTEM_STRING_PRIORITY","ProtectionModel_21Jan2015","videoElement","mediaKeys","eventHandler","_closeKeySessionInternal","session","removeEventListener","close","removeSession","token","parseKeyStatus","createSessionToken","ksInfo","handleEvent","keyStatuses","keyStatus","getSessionType","getExpirationTime","expiration","getKeyStatuses","getUsable","usable","addEventListener","closed","ksConfigurations","reject","_requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","protDataSystemStringPriority","systemStringPriority","currentKeySystem","systemStringsToApply","_checkAccessForSystemStrings","mediaKeySystemAccess","_checkAccessForKeySystem","configuration","getConfiguration","createMediaKeys","mkeys","setMediaKeys","mediaElement","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","ProtectionModel_3Feb2014","api","needkey","ready","release","boundDoSetKeys","doSetKeys","found","supportedAudio","supportedVideo","configIdx","audios","videos","audioIdx","MediaKeys","isTypeSupported","videoIdx","ksConfig","errorMessage","ksAccess","capabilities","keySession","NaN","destinationURL","ProtectionModel_01b","pendingSessions","moreSessionsAllowed","errHandler","removeEventListeners","cancelKeyRequest","findSessionByID","sessionArray","keyerror","keymessage","keyadded","ve","document","createElement","canPlayType","newSession","generateKeyRequest","addKey","errorCode","systemCode","shift","APIS_ProtectionModel_01b","APIS_ProtectionModel_3Feb2014","Protection","_getAPI","apis","createProtectionSystem","controller","videoModel","getElement","onencrypted","_getProtectionModel","setEncryptedMediaSupported","ProtectionEvents"],"mappings":"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","file":"dash.protection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dashjs\"] = factory();\n\telse\n\t\troot[\"dashjs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 71);\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Constants declaration\r\n * @class\r\n * @ignore\r\n * @hideconstructor\r\n */\r\nclass Constants {\r\n\r\n    init() {\r\n        /**\r\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STREAM = 'stream';\r\n\r\n        /**\r\n         *  @constant {string} VIDEO Video media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VIDEO = 'video';\r\n\r\n        /**\r\n         *  @constant {string} AUDIO Audio media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.AUDIO = 'audio';\r\n\r\n        /**\r\n         *  @constant {string} TEXT Text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TEXT = 'text';\r\n\r\n        /**\r\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MUXED = 'muxed';\r\n\r\n        /**\r\n         *  @constant {string} IMAGE Image media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.IMAGE = 'image';\r\n\r\n        /**\r\n         *  @constant {string} STPP STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STPP = 'stpp';\r\n\r\n        /**\r\n         *  @constant {string} TTML STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TTML = 'ttml';\r\n\r\n        /**\r\n         *  @constant {string} VTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VTT = 'vtt';\r\n\r\n        /**\r\n         *  @constant {string} WVTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.WVTT = 'wvtt';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_BOLA = 'abrBola';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_L2A = 'abrL2A';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\r\n\r\n        /**\r\n        *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_AAST Throughput calculation based on adjusted availability start time in low latency mode\r\n        *  @memberof Constants#\r\n        *  @static\r\n        */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_AAST = 'abrFetchThroughputCalculationAAST';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\r\n\r\n        /**\r\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\r\n\r\n        /**\r\n         *  @constant {string} EWMA Exponential moving average\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_EWMA = 'ewma';\r\n\r\n        /**\r\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\r\n\r\n        /**\r\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_FIRST_TRACK makes the player select the first track found in the manifest.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_FIRST_TRACK = 'firstTrack';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY makes the player select the track with the lowest bitrate per pixel average.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY = 'highestEfficiency';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with a widest range of bitrates.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with the highest selectionPriority as defined in the manifest\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_SELECTION_PRIORITY = 'highestSelectionPriority';\r\n\r\n        /**\r\n         *  @constant {string} CMCD_MODE_QUERY specifies to attach CMCD metrics as query parameters.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.CMCD_MODE_QUERY = 'query';\r\n\r\n        /**\r\n         *  @constant {string} CMCD_MODE_HEADER specifies to attach CMCD metrics as HTTP headers.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.CMCD_MODE_HEADER = 'header';\r\n\r\n\r\n        this.LOCATION = 'Location';\r\n        this.INITIALIZE = 'initialize';\r\n        this.TEXT_SHOWING = 'showing';\r\n        this.TEXT_HIDDEN = 'hidden';\r\n        this.CC1 = 'CC1';\r\n        this.CC3 = 'CC3';\r\n        this.UTF8 = 'utf-8';\r\n        this.SCHEME_ID_URI = 'schemeIdUri';\r\n        this.START_TIME = 'starttime';\r\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\r\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\r\n        this.XML = 'XML';\r\n        this.ARRAY_BUFFER = 'ArrayBuffer';\r\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\r\n        this.DVB_PROBABILITY = 'dvb:probability';\r\n        this.VIDEO_ELEMENT_READY_STATES = {\r\n            HAVE_NOTHING: 0,\r\n            HAVE_METADATA: 1,\r\n            HAVE_CURRENT_DATA: 2,\r\n            HAVE_FUTURE_DATA: 3,\r\n            HAVE_ENOUGH_DATA: 4\r\n        };\r\n    }\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst constants = new Constants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nimport path from 'path-browserify'\r\n\r\nclass Utils {\r\n    static mixin(dest, source, copy) {\r\n        let s;\r\n        let empty = {};\r\n        if (dest) {\r\n            for (let name in source) {\r\n                if (source.hasOwnProperty(name)) {\r\n                    s = source[name];\r\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\r\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\r\n                            dest[name] = Utils.mixin(dest[name], s, copy);\r\n                        } else {\r\n                            dest[name] = copy(s);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n\r\n    static clone(src) {\r\n        if (!src || typeof src !== 'object') {\r\n            return src; // anything\r\n        }\r\n        let r;\r\n        if (src instanceof Array) {\r\n            // array\r\n            r = [];\r\n            for (let i = 0, l = src.length; i < l; ++i) {\r\n                if (i in src) {\r\n                    r.push(Utils.clone(src[i]));\r\n                }\r\n            }\r\n        } else {\r\n            r = {};\r\n        }\r\n        return Utils.mixin(r, src, Utils.clone);\r\n    }\r\n\r\n    static addAditionalQueryParameterToUrl(url, params) {\r\n        try {\r\n            if (!params || params.length === 0) {\r\n                return url;\r\n            }\r\n\r\n            let modifiedUrl = new URL(url);\r\n\r\n            params.forEach((param) => {\r\n                if (param.key && param.value) {\r\n                    modifiedUrl.searchParams.set(param.key, param.value);\r\n                }\r\n            });\r\n\r\n            return modifiedUrl.href;\r\n\r\n\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    static parseHttpHeaders(headerStr) {\r\n        let headers = {};\r\n        if (!headerStr) {\r\n            return headers;\r\n        }\r\n\r\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\r\n        // which send a string starting with a \"\\n\" character\r\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\r\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n            let headerPair = headerPairs[i];\r\n            let index = headerPair.indexOf('\\u003a\\u0020');\r\n            if (index > 0) {\r\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    static generateUuid() {\r\n        let dt = new Date().getTime();\r\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = (dt + Math.random() * 16) % 16 | 0;\r\n            dt = Math.floor(dt / 16);\r\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n    static generateHashCode(string) {\r\n        let hash = 0;\r\n\r\n        if (string.length === 0) {\r\n            return hash;\r\n        }\r\n\r\n        for (let i = 0; i < string.length; i++) {\r\n            const chr = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + chr;\r\n            hash |= 0;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Compares both urls and returns a relative url (target relative to original)\r\n     * @param {string} original\r\n     * @param {string} target\r\n     * @return {string|*}\r\n     */\r\n    static getRelativeUrl(originalUrl, targetUrl) {\r\n        try {\r\n            const original = new URL(originalUrl);\r\n            const target = new URL(targetUrl);\r\n\r\n            // Unify the protocol to compare the origins\r\n            original.protocol = target.protocol;\r\n            if (original.origin !== target.origin) {\r\n                return targetUrl;\r\n            }\r\n\r\n            // Use the relative path implementation of the path library. We need to cut off the actual filename in the end to get the relative path\r\n            let relativePath = path.relative(original.pathname.substr(0, original.pathname.lastIndexOf('/')), target.pathname.substr(0, target.pathname.lastIndexOf('/')));\r\n\r\n            // In case the relative path is empty (both path are equal) return the filename only. Otherwise add a slash in front of the filename\r\n            const startIndexOffset = relativePath.length === 0 ? 1 : 0;\r\n            relativePath += target.pathname.substr(target.pathname.lastIndexOf('/') + startIndexOffset, target.pathname.length - 1);\r\n\r\n            // Build the other candidate, e.g. the 'host relative' path that starts with \"/\", and return the shortest of the two candidates.\r\n            if (target.pathname.length < relativePath.length) {\r\n                return target.pathname;\r\n            }\r\n            return relativePath;\r\n        } catch (e) {\r\n            return targetUrl\r\n        }\r\n    }\r\n}\r\n\r\nexport default Utils;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ErrorsBase {\r\n    extend (errors, config) {\r\n        if (!errors) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const err in errors) {\r\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\r\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\r\n            this[err] = errors[err];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorsBase;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n * @ignore\r\n */\r\nconst FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    let singletonContexts = [];\r\n    const singletonFactories = {};\r\n    const classFactories = {};\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        if (!context[name] && childInstance) {\r\n            context[name] = {\r\n                instance: childInstance,\r\n                override: override\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({\r\n            name: className,\r\n            context: context,\r\n            instance: instance\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this method to remove all singleton instances associated with a particular context.\r\n     *\r\n     * @param {Object} context\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function deleteSingletonInstances(context) {\r\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Factories storage Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function getFactoryByName(name, factoriesArray) {\r\n        return factoriesArray[name];\r\n    }\r\n\r\n    function updateFactory(name, factory, factoriesArray) {\r\n        if (name in factoriesArray) {\r\n            factoriesArray[name] = factory;\r\n        }\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Class Factories Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateClassFactory(name, factory) {\r\n        updateFactory(name, factory, classFactories);\r\n    }\r\n\r\n    function getClassFactoryByName(name) {\r\n        return getFactoryByName(name, classFactories);\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\r\n\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    create: function () {\r\n                        return merge(classConstructor, context, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Singleton Factory MAangement\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateSingletonFactory(name, factory) {\r\n        updateFactory(name, factory, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactoryByName(name) {\r\n        return getFactoryByName(name, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                let instance;\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    getInstance: function () {\r\n                        // If we don't have an instance yet check for one on the context\r\n                        if (!instance) {\r\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                        }\r\n                        // If there's no instance on the context then create one\r\n                        if (!instance) {\r\n                            instance = merge(classConstructor, context, arguments);\r\n                            singletonContexts.push({\r\n                                name: classConstructor.__dashjs_factory_name,\r\n                                context: context,\r\n                                instance: instance\r\n                            });\r\n                        }\r\n                        return instance;\r\n                    }\r\n                };\r\n            };\r\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n    function merge(classConstructor, context, args) {\r\n\r\n        let classInstance;\r\n        const className = classConstructor.__dashjs_factory_name;\r\n        const extensionObject = context[className];\r\n\r\n        if (extensionObject) {\r\n\r\n            let extension = extensionObject.instance;\r\n\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n\r\n                classInstance = classConstructor.apply({context}, args);\r\n                extension = extension.apply({\r\n                    context,\r\n                    factory: instance,\r\n                    parent: classInstance\r\n                }, args);\r\n\r\n                for (const prop in extension) {\r\n                    if (classInstance.hasOwnProperty(prop)) {\r\n                        classInstance[prop] = extension[prop];\r\n                    }\r\n                }\r\n\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n\r\n                return extension.apply({\r\n                    context,\r\n                    factory: instance\r\n                }, args);\r\n\r\n            }\r\n        } else {\r\n            // Create new instance of the class\r\n            classInstance = classConstructor.apply({context}, args);\r\n        }\r\n\r\n        // Add getClassName function to class instance prototype (used by Debug)\r\n        classInstance.getClassName = function () {return className;};\r\n\r\n        return classInstance;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        deleteSingletonInstances: deleteSingletonInstances,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getSingletonFactoryByName: getSingletonFactoryByName,\r\n        updateSingletonFactory: updateSingletonFactory,\r\n        getClassFactory: getClassFactory,\r\n        getClassFactoryByName: getClassFactoryByName,\r\n        updateClassFactory: updateClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\r\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\r\n * by Metrics Reporting code.\r\n * @ignore\r\n */\r\nclass HTTPRequest {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Identifier of the TCP connection on which the HTTP request was sent.\r\n         * @public\r\n         */\r\n        this.tcpid = null;\r\n        /**\r\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\r\n         * The type of the request:\r\n         * - MPD\r\n         * - XLink expansion\r\n         * - Initialization Fragment\r\n         * - Index Fragment\r\n         * - Media Fragment\r\n         * - Bitstream Switching Fragment\r\n         * - other\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * The original URL (before any redirects or failures)\r\n         * @public\r\n         */\r\n        this.url = null;\r\n        /**\r\n         * The actual URL requested, if different from above\r\n         * @public\r\n         */\r\n        this.actualurl = null;\r\n        /**\r\n         * The contents of the byte-range-spec part of the HTTP Range header.\r\n         * @public\r\n         */\r\n        this.range = null;\r\n        /**\r\n         * Real-Time | The real time at which the request was sent.\r\n         * @public\r\n         */\r\n        this.trequest = null;\r\n        /**\r\n         * Real-Time | The real time at which the first byte of the response was received.\r\n         * @public\r\n         */\r\n        this.tresponse = null;\r\n        /**\r\n         * The HTTP response code.\r\n         * @public\r\n         */\r\n        this.responsecode = null;\r\n        /**\r\n         * The duration of the throughput trace intervals (ms), for successful requests only.\r\n         * @public\r\n         */\r\n        this.interval = null;\r\n        /**\r\n         * Throughput traces, for successful requests only.\r\n         * @public\r\n         */\r\n        this.trace = [];\r\n\r\n        /**\r\n         * Type of stream (\"audio\" | \"video\" etc..)\r\n         * @public\r\n         */\r\n        this._stream = null;\r\n        /**\r\n         * Real-Time | The real time at which the request finished.\r\n         * @public\r\n         */\r\n        this._tfinish = null;\r\n        /**\r\n         * The duration of the media requests, if available, in seconds.\r\n         * @public\r\n         */\r\n        this._mediaduration = null;\r\n        /**\r\n         * The media segment quality\r\n         * @public\r\n         */\r\n        this._quality = null;\r\n        /**\r\n         * all the response headers from request.\r\n         * @public\r\n         */\r\n        this._responseHeaders = null;\r\n        /**\r\n         * The selected service location for the request. string.\r\n         * @public\r\n         */\r\n        this._serviceLocation = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\r\n * @ignore\r\n */\r\nclass HTTPRequestTrace {\r\n    /**\r\n    * @class\r\n    */\r\n    constructor() {\r\n        /**\r\n         * Real-Time | Measurement stream start.\r\n         * @public\r\n         */\r\n        this.s = null;\r\n        /**\r\n         * Measurement stream duration (ms).\r\n         * @public\r\n         */\r\n        this.d = null;\r\n        /**\r\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\r\n         * @public\r\n         */\r\n        this.b = [];\r\n        /**\r\n         * Measurement throughput in kbits/s\r\n         * @public\r\n         */\r\n         this.t = null;\r\n    }\r\n}\r\n\r\nHTTPRequest.GET = 'GET';\r\nHTTPRequest.HEAD = 'HEAD';\r\nHTTPRequest.MPD_TYPE = 'MPD';\r\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\r\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\r\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\r\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\r\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\r\nHTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE = 'FragmentInfoSegment';\r\nHTTPRequest.DVB_REPORTING_TYPE = 'DVBReporting';\r\nHTTPRequest.LICENSE = 'license';\r\nHTTPRequest.OTHER_TYPE = 'other';\r\n\r\nexport { HTTPRequest, HTTPRequestTrace };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nconst LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\r\n    attributes: ['Laurl','laurl'],\r\n    prefixes: ['clearkey', 'dashif']\r\n};\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass CommonEncryption {\r\n    /**\r\n     * Find and return the ContentProtection element in the given array\r\n     * that indicates support for MPEG Common Encryption\r\n     *\r\n     * @param {Array} cpArray array of content protection elements\r\n     * @returns {Object|null} the Common Encryption content protection element or\r\n     * null if one was not found\r\n     */\r\n    static findCencContentProtection(cpArray) {\r\n        let retVal = null;\r\n        for (let i = 0; i < cpArray.length; ++i) {\r\n            let cp = cpArray[i];\r\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\r\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\r\n                retVal = cp;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Returns just the data portion of a single PSSH\r\n     *\r\n     * @param {ArrayBuffer} pssh - the PSSH\r\n     * @return {ArrayBuffer} data portion of the PSSH\r\n     */\r\n    static getPSSHData(pssh) {\r\n        let offset = 8; // Box size and type fields\r\n        let view = new DataView(pssh);\r\n\r\n        // Read version\r\n        let version = view.getUint8(offset);\r\n\r\n        offset += 20; // Version (1), flags (3), system ID (16)\r\n\r\n        if (version > 0) {\r\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\r\n        }\r\n\r\n        offset += 4; // Data size\r\n        return pssh.slice(offset);\r\n    }\r\n\r\n    /**\r\n     * Returns the PSSH associated with the given key system from the concatenated\r\n     * list of PSSH boxes in the given initData\r\n     *\r\n     * @param {KeySystem} keySystem the desired\r\n     * key system\r\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\r\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\r\n     * or null if a valid association could not be found.\r\n     */\r\n    static getPSSHForKeySystem(keySystem, initData) {\r\n        let psshList = CommonEncryption.parsePSSHList(initData);\r\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\r\n            return psshList[keySystem.uuid.toLowerCase()];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse a standard common encryption PSSH which contains a simple\r\n     * base64-encoding of the init data\r\n     *\r\n     * @param {Object} cpData the ContentProtection element\r\n     * @param {BASE64} BASE64 reference\r\n     * @returns {ArrayBuffer|null} the init data or null if not found\r\n     */\r\n    static parseInitDataFromContentProtection(cpData, BASE64) {\r\n        if ('pssh' in cpData) {\r\n\r\n            // Remove whitespaces and newlines from pssh text\r\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\r\n\r\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\r\n     *\r\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\r\n     * CDM as initialization data when CommonEncryption content is detected\r\n     * @returns {Object|Array} an object that has a property named according to each of\r\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\r\n     * and a ArrayBuffer (the entire PSSH box) as the property value\r\n     */\r\n    static parsePSSHList(data) {\r\n\r\n        if (data === null || data === undefined)\r\n            return [];\r\n\r\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\r\n        let done = false;\r\n        let pssh = {};\r\n\r\n        // TODO: Need to check every data read for end of buffer\r\n        let byteCursor = 0;\r\n        while (!done) {\r\n\r\n            let size,\r\n                nextBox,\r\n                version,\r\n                systemID;\r\n            let boxStart = byteCursor;\r\n\r\n            if (byteCursor >= dv.buffer.byteLength)\r\n                break;\r\n\r\n            /* Box size */\r\n            size = dv.getUint32(byteCursor);\r\n            nextBox = byteCursor + size;\r\n            byteCursor += 4;\r\n\r\n            /* Verify PSSH */\r\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor += 4;\r\n\r\n            /* Version must be 0 or 1 */\r\n            version = dv.getUint8(byteCursor);\r\n            if (version !== 0 && version !== 1) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor++;\r\n\r\n            byteCursor += 3; /* skip flags */\r\n\r\n            // 16-byte UUID/SystemID\r\n            systemID = '';\r\n            let i, val;\r\n            for (i = 0; i < 4; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 4;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 6; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 6;\r\n\r\n            systemID = systemID.toLowerCase();\r\n\r\n            /* PSSH Data Size */\r\n            byteCursor += 4;\r\n\r\n            /* PSSH Data */\r\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\r\n            byteCursor = nextBox;\r\n        }\r\n\r\n        return pssh;\r\n    }\r\n\r\n    static getLicenseServerUrlFromMediaInfo(mediaInfo, schemeIdUri) {\r\n        try {\r\n\r\n            if (!mediaInfo || mediaInfo.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let i = 0;\r\n            let licenseServer = null;\r\n\r\n            while (i < mediaInfo.length && !licenseServer) {\r\n                const info = mediaInfo[i];\r\n\r\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\r\n                    const targetProtectionData = info.contentProtection.filter((cp) => {\r\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdUri;\r\n                    });\r\n\r\n                    if (targetProtectionData && targetProtectionData.length > 0) {\r\n                        let j = 0;\r\n                        while (j < targetProtectionData.length && !licenseServer) {\r\n                            const ckData = targetProtectionData[j];\r\n                            let k = 0;\r\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\r\n                                let l = 0;\r\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\r\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\r\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\r\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\r\n                                        licenseServer = ckData[attribute].__text;\r\n                                    }\r\n                                    l += 1;\r\n                                }\r\n                                k += 1;\r\n                            }\r\n                            j += 1;\r\n                        }\r\n                    }\r\n                }\r\n                i += 1;\r\n            }\r\n            return licenseServer;\r\n        } catch\r\n            (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommonEncryption;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc A media capability\r\n * @ignore\r\n */\r\nclass MediaCapability {\r\n    /**\r\n     * @param {string} contentType MIME type and codecs (RFC6386)\r\n     * @param {string} robustness\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(contentType, robustness) {\r\n        this.contentType = contentType;\r\n        this.robustness = robustness;\r\n    }\r\n}\r\n\r\nexport default MediaCapability;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc Represents a set of configurations that describe the capabilities desired for\r\n *  support by a given CDM\r\n * @ignore\r\n */\r\nclass KeySystemConfiguration {\r\n    /**\r\n     * @param {Array.<MediaCapability>} audioCapabilities array of\r\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {Array.<MediaCapability>} videoCapabilities array of\r\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\r\n     * One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {string} persistentState desired support for persistent storage of\r\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {Array.<string>} sessionTypes List of session types that must\r\n     * be supported by the key system\r\n     * @class\r\n     */\r\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\r\n        this.initDataTypes = [ 'cenc' ];\r\n        if (audioCapabilities && audioCapabilities.length) {\r\n            this.audioCapabilities = audioCapabilities;\r\n        }\r\n        if (videoCapabilities && videoCapabilities.length) {\r\n            this.videoCapabilities = videoCapabilities;\r\n        }\r\n        this.distinctiveIdentifier = distinctiveIdentifier;\r\n        this.persistentState = persistentState;\r\n        this.sessionTypes = sessionTypes;\r\n    }\r\n}\r\n\r\nexport default KeySystemConfiguration;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\r\n/**\r\n * @class\r\n */\r\nclass ProtectionErrors extends ErrorsBase {\r\n\tconstructor () {\r\n        super();\r\n\r\n        /**\r\n         *  Generid key Error code\r\n         */\r\n        this.MEDIA_KEYERR_CODE = 100;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\r\n\r\n        /**\r\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\r\n        /**\r\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\r\n        /**\r\n         *  Error code returned when License server certificate has not been successfully updated\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\r\n        /**\r\n         *  Error code returned when license validity has expired\r\n         */\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\r\n        /**\r\n         *  Error code returned when no licenser url is defined\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\r\n        /**\r\n         *  Error code returned when key system access is denied\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\r\n        /**\r\n         *  Error code returned when key session has not been successfully created\r\n         */\r\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\r\n        /**\r\n         *  Error code returned when license request failed after a keymessage event has been triggered\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\r\n\r\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\r\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\r\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\r\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\r\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\r\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\r\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\r\n    }\r\n}\r\n\r\nlet protectionErrors = new ProtectionErrors();\r\nexport default protectionErrors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Defines a license request\r\n * @ignore\r\n */\r\nclass LicenseRequest {\r\n    /**\r\n     * Defines a license request\r\n     *\r\n     * @class\r\n     */\r\n    constructor(url, method, responseType, headers, withCredentials, messageType, sessionId, data) {\r\n\r\n        /**\r\n         * The license request url\r\n         */\r\n        this.url = url;\r\n\r\n        /**\r\n         * The HTTP method\r\n         */\r\n        this.method = method;\r\n\r\n        /**\r\n         * The HTTP response type\r\n         */\r\n        this.responseType = responseType;\r\n\r\n        /**\r\n         * The HTP request headers\r\n         */\r\n        this.headers = headers;\r\n\r\n        /**\r\n         * Wether request is done using credentials (cross-site cookies)\r\n         */\r\n        this.withCredentials = withCredentials;\r\n\r\n        /**\r\n         * The license request message type (see https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)\r\n         */\r\n        this.messageType = messageType;\r\n\r\n        /**\r\n         * The corresponding EME session ID\r\n         */\r\n        this.sessionId = sessionId;\r\n\r\n        /**\r\n         * The license request data\r\n         */\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport default LicenseRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Defines a license response\r\n */\r\nclass LicenseResponse {\r\n    /**\r\n     * Defines a license request\r\n     *\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(url, headers, data) {\r\n\r\n        /**\r\n         * The url that was loaded, that can be redirected from original request url\r\n         */\r\n        this.url = url;\r\n\r\n        /**\r\n         * The HTP response headers\r\n         */\r\n        this.headers = headers;\r\n\r\n        /**\r\n         * The license response data\r\n         */\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport default LicenseResponse;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport LicenseRequest from '../vo/LicenseRequest';\r\nimport LicenseResponse from '../vo/LicenseResponse';\r\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\r\nimport Utils from '../../../core/Utils';\r\nimport Constants from '../../constants/Constants';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * This module can be accessed using the MediaPlayer API getProtectionController()\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n    const cmcdModel = config.cmcdModel;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        pendingKeySystemData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        selectedKeySystem,\r\n        keySystemSelectionInProgress,\r\n        licenseRequestFilters,\r\n        licenseResponseFilters;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingKeySystemData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, _onKeyMessage, instance);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, _onKeyStatusChanged, instance);\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system for a given media type.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same. Just use one valid MediaInfo object\r\n        let supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection, protDataSet, sessionType);\r\n\r\n        // Reorder key systems according to priority order provided in protectionData\r\n        supportedKS = supportedKS.sort((ksA, ksB) => {\r\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\r\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\r\n            return indexA - indexB;\r\n        });\r\n\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            _selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a key system if we dont have any one yet. Otherwise we use the existing key system and trigger a new license request if the initdata has changed\r\n     * @param {array} supportedKS\r\n     * @param {boolean} fromManifest\r\n     * @private\r\n     */\r\n    function _selectKeySystem(supportedKS, fromManifest) {\r\n\r\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\r\n        if (keySystemSelectionInProgress) {\r\n            pendingKeySystemData.push(supportedKS);\r\n        }\r\n\r\n        // First time, so we need to select a key system\r\n        else if (!selectedKeySystem) {\r\n            _selectInitialKeySystem(supportedKS, fromManifest);\r\n        }\r\n\r\n        // We already selected a key system. We only need to trigger a new license exchange if the init data has changed\r\n        else if (selectedKeySystem) {\r\n            _initiateWithExistingKeySystem(supportedKS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We do not have a key system yet. Select one\r\n     * @param {array} supportedKS\r\n     * @param {boolean} fromManifest\r\n     * @private\r\n     */\r\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\r\n        keySystemSelectionInProgress = true;\r\n        const requestedKeySystems = [];\r\n\r\n        pendingKeySystemData.push(supportedKS);\r\n\r\n        // Add all key systems to our request list since we have yet to select a key system\r\n        for (let i = 0; i < supportedKS.length; i++) {\r\n            const keySystemConfiguration = _getKeySystemConfiguration(supportedKS[i]);\r\n            requestedKeySystems.push({\r\n                ks: supportedKS[i].ks,\r\n                configs: [keySystemConfiguration],\r\n                protData: supportedKS[i].protData\r\n            });\r\n        }\r\n\r\n        let keySystemAccess;\r\n\r\n        protectionModel.requestKeySystemAccess(requestedKeySystems)\r\n            .then((event) => {\r\n                keySystemAccess = event.data;\r\n                let selectedSystemString = keySystemAccess.mksa && keySystemAccess.mksa.selectedSystemString ? keySystemAccess.mksa.selectedSystemString : keySystemAccess.keySystem.systemString;\r\n                logger.info('DRM: KeySystem Access Granted for system string (' + selectedSystemString + ')!  Selecting key system...');\r\n                return protectionModel.selectKeySystem(keySystemAccess);\r\n            })\r\n            .then((keySystem) => {\r\n                selectedKeySystem = keySystem;\r\n                keySystemSelectionInProgress = false;\r\n\r\n                if (!protectionModel) {\r\n                    return;\r\n                }\r\n\r\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\r\n\r\n                // Set server certificate from protData\r\n                const protData = _getProtDataForKeySystem(selectedKeySystem);\r\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                }\r\n\r\n                // Create key sessions for the different AdaptationSets\r\n                let ksIdx;\r\n                for (let i = 0; i < pendingKeySystemData.length; i++) {\r\n                    for (ksIdx = 0; ksIdx < pendingKeySystemData[i].length; ksIdx++) {\r\n                        if (selectedKeySystem === pendingKeySystemData[i][ksIdx].ks) {\r\n                            const current = pendingKeySystemData[i][ksIdx]\r\n                            _loadOrCreateKeySession(current)\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .catch((event) => {\r\n                selectedKeySystem = null;\r\n                keySystemSelectionInProgress = false;\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                        data: null,\r\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * If we have already selected a keysytem we only need to create a new key session and issue a new license request if the init data has changed.\r\n     * @param {array} supportedKS\r\n     * @private\r\n     */\r\n    function _initiateWithExistingKeySystem(supportedKS) {\r\n        const ksIdx = supportedKS.findIndex((entry) => {\r\n            return entry.ks === selectedKeySystem;\r\n        });\r\n\r\n        const current = supportedKS[ksIdx];\r\n        if (ksIdx === -1 || !current.initData) {\r\n            return;\r\n        }\r\n\r\n        _loadOrCreateKeySession(current);\r\n    }\r\n\r\n    /**\r\n     * Loads an existing key session if we already have a session id. Otherwise we create a new key session\r\n     * @param {object} keySystemInfo\r\n     * @private\r\n     */\r\n    function _loadOrCreateKeySession(keySystemInfo) {\r\n        // Clearkey\r\n        if (protectionKeyController.isClearKey(selectedKeySystem)) {\r\n            // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n            // initData and overwrite possible initData indicated in encrypted event (EME)\r\n            if (keySystemInfo.protData && keySystemInfo.protData.hasOwnProperty('clearkeys')) {\r\n                const initData = { kids: Object.keys(keySystemInfo.protData.clearkeys) };\r\n                keySystemInfo.initData = new TextEncoder().encode(JSON.stringify(initData));\r\n            }\r\n        }\r\n\r\n        // Reuse existing KeySession\r\n        if (keySystemInfo.sessionId) {\r\n            // Load MediaKeySession with sessionId\r\n            loadKeySession(keySystemInfo);\r\n        }\r\n\r\n        // Create a new KeySession\r\n        else if (keySystemInfo.initData !== null) {\r\n            // Create new MediaKeySession with initData\r\n            createKeySession(keySystemInfo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This essentially creates a new key session\r\n     *\r\n     * @param {object} ksInfo\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function loadKeySession(keySystemInfo) {\r\n        checkConfig();\r\n        protectionModel.loadKeySession(keySystemInfo);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from the MPD or from the PSSH box in the media\r\n     * For the latest version of the EME a request is generated. Once this request is ready we get notified via the INTERNAL_KEY_MESSAGE event\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function createKeySession(keySystemInfo) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(selectedKeySystem, keySystemInfo ? keySystemInfo.initData : null);\r\n\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate key id\r\n            if (_isKeyIdDuplicate(keySystemInfo.keyId)) {\r\n                return;\r\n            }\r\n\r\n            // Check for duplicate initData\r\n            if (_isInitDataDuplicate(initDataForKS)) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                keySystemInfo.initData = initDataForKS;\r\n                protectionModel.createKeySession(keySystemInfo);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\r\n                });\r\n            }\r\n        } else if (keySystemInfo && keySystemInfo.initData) {\r\n            protectionModel.createKeySession(keySystemInfo);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (selectedKeySystem ? selectedKeySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the protectionData for a specific keysystem as specified by the application.\r\n     * @param {object} keySystem\r\n     * @return {object | null}\r\n     * @private\r\n     */\r\n    function _getProtDataForKeySystem(keySystem) {\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                return (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes all entries from the mediaInfoArr\r\n     */\r\n    function clearMediaInfoArray() {\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        checkConfig();\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps, protDataSet, sessionType);\r\n    }\r\n\r\n    /**\r\n     * Checks if a session has already created for the provided key id\r\n     * @param {string} keyId\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n     function _isKeyIdDuplicate(keyId) {\r\n\r\n        if (!keyId) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const sessions = protectionModel.getSessions();\r\n            for (let i = 0; i < sessions.length; i++) {\r\n                if (sessions[i].getKeyId() === keyId) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided init data is equal to one of the existing init data values\r\n     * @param {any} initDataForKS\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _isInitDataDuplicate(initDataForKS) {\r\n\r\n        if (!initDataForKS) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        checkConfig();\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        checkConfig();\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, _onNeedKey, instance);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, _onNeedKey, instance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function reset() {\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, _onKeyMessage, instance);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, _onKeyStatusChanged, instance);\r\n\r\n        checkConfig();\r\n\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n\r\n        setMediaElement(null);\r\n\r\n        selectedKeySystem = null;\r\n        keySystemSelectionInProgress = false;\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n        pendingKeySystemData = [];\r\n    }\r\n\r\n    /**\r\n     * Returns an object corresponding to the EME MediaKeySystemConfiguration dictionary\r\n     * @param {object} keySystem\r\n     * @return {KeySystemConfiguration}\r\n     * @private\r\n     */\r\n    function _getKeySystemConfiguration(keySystemData) {\r\n        const protData = keySystemData.protData;\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = keySystemData.sessionType;\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the status of the key has changed\r\n     * @param {object} e\r\n     * @private\r\n     */\r\n    function _onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the key message event. Once we have a key message we can issue a license request\r\n     * @param {object} e\r\n     * @private\r\n     */\r\n    function _onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = _getProtDataForKeySystem(selectedKeySystem);\r\n        const licenseServerModelInstance = protectionKeyController.getLicenseServerModelInstance(selectedKeySystem, protData, messageType);\r\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            _sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerModelInstance) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionId());\r\n            _sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(selectedKeySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(selectedKeySystem, protData, message);\r\n            if (clearkeys) {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                _sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // In all other cases we have to make a license request\r\n        _issueLicenseRequest(keyMessage, licenseServerModelInstance, protData);\r\n    }\r\n\r\n    /**\r\n     * Notify other classes that the license request was completed\r\n     * @param {object} data\r\n     * @param {object} error\r\n     * @private\r\n     */\r\n    function _sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\r\n    }\r\n\r\n    /**\r\n     * Start issuing a license request\r\n     * @param {object} keyMessage\r\n     * @param {object} licenseServerData\r\n     * @param {object} protData\r\n     * @private\r\n     */\r\n    function _issueLicenseRequest(keyMessage, licenseServerData, protData) {\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\r\n        const keySystemString = selectedKeySystem ? selectedKeySystem.systemString : null;\r\n\r\n        // Determine license server URL\r\n        let url = _getLicenseServerUrl(protData, messageType, sessionToken, keyMessage, licenseServerData);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            _sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        if (protData) {\r\n            _updateHeaders(reqHeaders, protData.httpRequestHeaders);\r\n        }\r\n        const message = keyMessage.message;\r\n        const headersFromMessage = selectedKeySystem.getRequestHeadersFromMessage(message);\r\n        _updateHeaders(reqHeaders, headersFromMessage);\r\n\r\n        Object.keys(reqHeaders).forEach((key) => {\r\n            if ('authorization' === key.toLowerCase()) {\r\n                withCredentials = true;\r\n            }\r\n        });\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status >= 200 && xhr.status <= 299) {\r\n                const responseHeaders = Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null);\r\n                let licenseResponse = new LicenseResponse(xhr.responseURL, responseHeaders, xhr.response);\r\n                _applyFilters(licenseResponseFilters, licenseResponse)\r\n                    .then(() => {\r\n                        const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\r\n                        if (licenseMessage !== null) {\r\n                            _sendLicenseRequestCompleteEvent(eventData);\r\n                            protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                        } else {\r\n                            _reportError(xhr, eventData, keySystemString, messageType, licenseServerData);\r\n                        }\r\n                    });\r\n            } else {\r\n                _reportError(xhr, eventData, keySystemString, messageType, licenseServerData);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            _sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            _sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const reqPayload = selectedKeySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n        const sessionId = sessionToken.getSessionId() || null;\r\n\r\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\r\n        const retryAttempts = !isNaN(settings.get().streaming.retryAttempts[HTTPRequest.LICENSE]) ? settings.get().streaming.retryAttempts[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRIES;\r\n        _applyFilters(licenseRequestFilters, licenseRequest)\r\n            .then(() => {\r\n                _doLicenseRequest(licenseRequest, retryAttempts, timeout, onLoad, onAbort, onError);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n     * @param {object} request\r\n     * @param {number} retriesCount\r\n     * @param {number} timeout\r\n     * @param {function} onLoad\r\n     * @param {function} onAbort\r\n     * @param {function} onError\r\n     * @private\r\n     */\r\n    function _doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n            const cmcdMode = settings.get().streaming.cmcd.mode;\r\n            if (cmcdMode === Constants.CMCD_MODE_QUERY) {\r\n                const cmcdParams = cmcdModel.getQueryParameter({\r\n                    url: request.url,\r\n                    type: HTTPRequest.LICENSE\r\n                });\r\n\r\n                if (cmcdParams) {\r\n                    request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\r\n                }\r\n            }\r\n        }\r\n\r\n        xhr.open(request.method, request.url, true);\r\n        xhr.responseType = request.responseType;\r\n        xhr.withCredentials = request.withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in request.headers) {\r\n            xhr.setRequestHeader(key, request.headers[key]);\r\n        }\r\n\r\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n            const cmcdMode = settings.get().streaming.cmcd.mode;\r\n            if (cmcdMode === Constants.CMCD_MODE_HEADER) {\r\n                const cmcdHeaders = cmcdModel.getHeaderParameters({\r\n                    url: request.url,\r\n                    type: HTTPRequest.LICENSE\r\n                });\r\n\r\n                if (cmcdHeaders) {\r\n                    for (const header in cmcdHeaders) {\r\n                        let value = cmcdHeaders[header];\r\n                        if (value) {\r\n                            xhr.setRequestHeader(header, value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const _retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            const retryInterval = !isNaN(settings.get().streaming.retryIntervals[HTTPRequest.LICENSE]) ? settings.get().streaming.retryIntervals[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRY_INTERVAL;\r\n            setTimeout(function () {\r\n                _doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\r\n            }, retryInterval);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status >= 200 && this.status <= 299 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                _retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                _retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        // deprecated, to be removed\r\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\r\n            url: request.url,\r\n            headers: request.headers,\r\n            payload: request.data,\r\n            sessionId: request.sessionId\r\n        });\r\n\r\n        xhr.send(request.data);\r\n    }\r\n\r\n    /**\r\n     * Returns the url of the license server\r\n     * @param {object} protData\r\n     * @param {string} messageType\r\n     * @param {object} sessionToken\r\n     * @param {object} keyMessage\r\n     * @param {object} licenseServerData\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    function _getLicenseServerUrl(protData, messageType, sessionToken, keyMessage, licenseServerData) {\r\n        let url = null;\r\n        const message = keyMessage.message;\r\n\r\n        // Check if the url is defined by the application\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        }\r\n\r\n        // This is the old way of providing the url\r\n        else if (protData && protData.laURL && protData.laURL !== '') {\r\n            url = protData.laURL;\r\n        }\r\n\r\n        // No url provided by the app. Check the manifest and the pssh\r\n        else {\r\n            // Check for url defined in the manifest\r\n            url = CommonEncryption.getLicenseServerUrlFromMediaInfo(mediaInfoArr, selectedKeySystem.schemeIdURI);\r\n\r\n            // In case we are not using Clearky we can still get a url from the pssh.\r\n            if (!url && !protectionKeyController.isClearKey(selectedKeySystem)) {\r\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\r\n                url = selectedKeySystem.getLicenseServerURLFromInitData(psshData);\r\n\r\n                // Still no url, check the keymessage\r\n                if (!url) {\r\n                    url = keyMessage.laURL;\r\n                }\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Add new headers to the existing ones\r\n     * @param {array} reqHeaders\r\n     * @param {object} headers\r\n     * @private\r\n     */\r\n    function _updateHeaders(reqHeaders, headers) {\r\n        if (headers) {\r\n            for (const key in headers) {\r\n                reqHeaders[key] = headers[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reports an error that might have occured during the license request\r\n     * @param {object} xhr\r\n     * @param {object} eventData\r\n     * @param {string} keySystemString\r\n     * @param {string} messageType\r\n     * @param {object} licenseServerData\r\n     * @private\r\n     */\r\n    function _reportError(xhr, eventData, keySystemString, messageType, licenseServerData) {\r\n        const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n        _sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n            ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n            xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n    }\r\n\r\n    /**\r\n     * Applies custom filters defined by the application\r\n     * @param {array} filters\r\n     * @param {object} param\r\n     * @return {Promise<void>|*}\r\n     * @private\r\n     */\r\n    function _applyFilters(filters, param) {\r\n        if (!filters) return Promise.resolve();\r\n        return filters.reduce((prev, next) => {\r\n            return prev.then(() => {\r\n                return next(param);\r\n            });\r\n        }, Promise.resolve());\r\n    }\r\n\r\n    /**\r\n     * Event handler for \"needkey\" and \"encrypted\" events\r\n     * @param {object} event\r\n     * @param {number} retry\r\n     */\r\n    function _onNeedKey(event, retry) {\r\n        if (!settings.get().streaming.protection.ignoreEmeEncryptedEvent) {\r\n            logger.debug('DRM: onNeedKey');\r\n\r\n            // Ignore non-cenc initData\r\n            if (event.key.initDataType !== 'cenc') {\r\n                logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n                return;\r\n            }\r\n\r\n            if (mediaInfoArr.length === 0) {\r\n                logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n                retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n                if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                    needkeyRetries.push(setTimeout(() => {\r\n                        _onNeedKey(event, retry);\r\n                    }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n            // Convert to ArrayBuffer\r\n            let abInitData = event.key.initData;\r\n            if (ArrayBuffer.isView(abInitData)) {\r\n                abInitData = abInitData.buffer;\r\n            }\r\n\r\n            // If key system has already been selected and initData already seen, then do nothing\r\n            if (selectedKeySystem) {\r\n                const initDataForKS = CommonEncryption.getPSSHForKeySystem(selectedKeySystem, abInitData);\r\n                if (initDataForKS) {\r\n                    // Check for duplicate initData\r\n                    if (_isInitDataDuplicate(initDataForKS)) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n            const supportedKS = protectionKeyController.getSupportedKeySystemsFromSegmentPssh(abInitData, protDataSet, sessionType);\r\n            if (supportedKS.length === 0) {\r\n                logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n                return;\r\n            }\r\n\r\n            _selectKeySystem(supportedKS, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all available key systems\r\n     * @return {array}\r\n     */\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    /**\r\n     * Sets all available key systems\r\n     * @param {array} keySystems\r\n     */\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the request filters to be applied before the license request is made\r\n     * @param {array} filters\r\n     */\r\n    function setLicenseRequestFilters(filters) {\r\n        licenseRequestFilters = filters;\r\n    }\r\n\r\n    /**\r\n     * Sets the response filters to be applied after the license response has been received.\r\n     * @param {array} filters\r\n     */\r\n    function setLicenseResponseFilters(filters) {\r\n        licenseResponseFilters = filters;\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia,\r\n        clearMediaInfoArray,\r\n        createKeySession,\r\n        loadKeySession,\r\n        removeKeySession,\r\n        closeKeySession,\r\n        setServerCertificate,\r\n        setMediaElement,\r\n        setSessionType,\r\n        setRobustnessLevel,\r\n        setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems,\r\n        setKeySystems,\r\n        setLicenseRequestFilters,\r\n        setLicenseResponseFilters,\r\n        stop,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\r\n * @ignore\r\n */\r\nclass KeyPair {\r\n    /**\r\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\r\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyID, key) {\r\n        this.keyID = keyID;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport default KeyPair;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\r\n *  type\r\n * @ignore\r\n */\r\nclass ClearKeyKeySet {\r\n    /**\r\n     * @param {Array.<KeyPair>} keyPairs\r\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\r\n     * or 'temporary'.  Can also be null or undefined.\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyPairs, type) {\r\n        if (type && type !== 'persistent' && type !== 'temporary')\r\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\r\n        this.keyPairs = keyPairs;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Convert this key set to its JSON Web Key (JWK) representation\r\n     *\r\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\r\n     */\r\n    toJWK() {\r\n        let i;\r\n        let numKeys = this.keyPairs.length;\r\n        let jwk = {keys: []};\r\n\r\n        for (i = 0; i < numKeys; i++) {\r\n            let key = {\r\n                kty: 'oct',\r\n                alg: 'A128KW',\r\n                kid: this.keyPairs[i].keyID,\r\n                k: this.keyPairs[i].key\r\n            };\r\n            jwk.keys.push(key);\r\n        }\r\n        if (this.type) {\r\n            jwk.type = this.type;\r\n        }\r\n        let jwkString = JSON.stringify(jwk);\r\n        const len = jwkString.length;\r\n\r\n        // Convert JSON string to ArrayBuffer\r\n        let buf = new ArrayBuffer(len);\r\n        let bView = new Uint8Array(buf);\r\n        for (i = 0; i < len; i++)\r\n            bView[i] = jwkString.charCodeAt(i);\r\n        return buf;\r\n    }\r\n}\r\n\r\nexport default ClearKeyKeySet;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Protection Constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass ProtectionConstants {\r\n\r\n    init () {\r\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\r\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\r\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\r\n        this.PLAYREADY_RECOMMENDATION_KEYSTEM_STRING = 'com.microsoft.playready.recommendation';\r\n        this.INITIALIZATION_DATA_TYPE_CENC = 'cenc';\r\n        this.INITIALIZATION_DATA_TYPE_KEYIDS = 'keyids'\r\n        this.INITIALIZATION_DATA_TYPE_WEBM = 'webm'\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new ProtectionConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemClearKey(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionData} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp, cencContentProtection) {\r\n        try {\r\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n\r\n            if (!initData && cencContentProtection) {\r\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\r\n                const data = {kids: [cencDefaultKid]};\r\n                initData = new TextEncoder().encode(JSON.stringify(data));\r\n            }\r\n\r\n            return initData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\r\n        try {\r\n            let kid = cencDefaultKid.replace(/-/g, '');\r\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\r\n                return String.fromCharCode(parseInt(a, 16));\r\n            }).join(''));\r\n            return kid.replace(/=/g, '');\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        // Set content type to application/json by default\r\n        return {\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return JSON.stringify(JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message))));\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData(/*cdmData*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid,\r\n        schemeIdURI,\r\n        systemString,\r\n        getInitData,\r\n        getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData,\r\n        getCDMData,\r\n        getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemW3CClearKey(config) {\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const logger = config.debug.getLogger(instance);\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionDataSet} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n\r\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData(/*cdmData*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Google Widevine DRM\r\n *\r\n * @class\r\n * @implements MediaPlayer.dependencies.protection.KeySystem\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\r\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemWidevine(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage( /*message*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData(/*cdmData*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid,\r\n        schemeIdURI,\r\n        systemString,\r\n        getInitData,\r\n        getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData,\r\n        getCDMData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Microsoft PlayReady DRM\r\n *\r\n * @class\r\n * @implements KeySystem\r\n */\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\r\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\r\n\r\nfunction KeySystemPlayReady(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let messageFormat = 'utf-16';\r\n    const BASE64 = config.BASE64;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(message) {\r\n        let msg,\r\n            xmlDoc;\r\n        const headers = {};\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        msg = String.fromCharCode.apply(null, dataview);\r\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        const headerNameList = xmlDoc.getElementsByTagName('name');\r\n        const headerValueList = xmlDoc.getElementsByTagName('value');\r\n        for (let i = 0; i < headerNameList.length; i++) {\r\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\r\n        }\r\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\r\n        // this is NOT w3c conform and license servers may reject the request!\r\n        // -> rename it to proper w3c definition!\r\n        if (headers.hasOwnProperty('Content')) {\r\n            headers['Content-Type'] = headers.Content;\r\n            delete headers.Content;\r\n        }\r\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\r\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\r\n        if (!headers.hasOwnProperty('Content-Type')) {\r\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        let licenseRequest = null;\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        checkConfig();\r\n        const msg = String.fromCharCode.apply(null, dataview);\r\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\r\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\r\n            if (Challenge) {\r\n                licenseRequest = BASE64.decode(Challenge);\r\n            }\r\n        } else {\r\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\r\n            // thus it contains direclty the challenge itself\r\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\r\n            return message;\r\n        }\r\n\r\n        return licenseRequest;\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(initData) {\r\n        if (initData) {\r\n            const data = new DataView(initData);\r\n            const numRecords = data.getUint16(4, true);\r\n            let offset = 6;\r\n            const parser = new DOMParser();\r\n\r\n            for (let i = 0; i < numRecords; i++) {\r\n                // Parse the PlayReady Record header\r\n                const recordType = data.getUint16(offset, true);\r\n                offset += 2;\r\n                const recordLength = data.getUint16(offset, true);\r\n                offset += 2;\r\n                if (recordType !== 0x0001) {\r\n                    offset += recordLength;\r\n                    continue;\r\n                }\r\n\r\n                const recordData = initData.slice(offset, offset + recordLength);\r\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\r\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\r\n\r\n                // First try <LA_URL>\r\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\r\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\r\n                    if (laurl) {\r\n                        return laurl;\r\n                    }\r\n                }\r\n\r\n                // Optionally, try <LUI_URL>\r\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\r\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\r\n                    if (luiurl) {\r\n                        return luiurl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getInitData(cpData) {\r\n        // * desc@ getInitData\r\n        // *   generate PSSH data from PROHeader defined in MPD file\r\n        // *   PSSH format:\r\n        // *   size (4)\r\n        // *   box type(PSSH) (8)\r\n        // *   Protection SystemID (16)\r\n        // *   protection system data size (4) - length of decoded PROHeader\r\n        // *   decoded PROHeader data from MPD file\r\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\r\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\r\n\r\n        let byteCursor = 0;\r\n        let uint8arraydecodedPROHeader = null;\r\n\r\n        let PROSize,\r\n            PSSHSize,\r\n            PSSHBoxBuffer,\r\n            PSSHBox,\r\n            PSSHData;\r\n\r\n        checkConfig();\r\n        if (!cpData) {\r\n            return null;\r\n        }\r\n        // Handle common encryption PSSH\r\n        if ('pssh' in cpData) {\r\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\r\n        }\r\n        // Handle native MS PlayReady ContentProtection elements\r\n        if ('pro' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\r\n        }\r\n        else if ('prheader' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n        PROSize = uint8arraydecodedPROHeader.length;\r\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\r\n\r\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\r\n\r\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\r\n        PSSHData = new DataView(PSSHBoxBuffer);\r\n\r\n        PSSHData.setUint32(byteCursor, PSSHSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(PSSHBoxType, byteCursor);\r\n        byteCursor += PSSHBoxType.length;\r\n\r\n        PSSHBox.set(playreadySystemID, byteCursor);\r\n        byteCursor += playreadySystemID.length;\r\n\r\n        PSSHData.setUint32(byteCursor, PROSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\r\n        byteCursor += PROSize;\r\n\r\n        return PSSHBox.buffer;\r\n    }\r\n\r\n    /**\r\n     * It seems that some PlayReady implementations return their XML-based CDM\r\n     * messages using UTF16, while others return them as UTF8.  Use this function\r\n     * to modify the message format to expect when parsing CDM messages.\r\n     *\r\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\r\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\r\n     */\r\n    function setPlayReadyMessageFormat(format) {\r\n        if (format !== 'utf-8' && format !== 'utf-16') {\r\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\r\n        }\r\n        messageFormat = format;\r\n    }\r\n\r\n    /**\r\n     * Get Playready Custom data\r\n     */\r\n    function getCDMData(_cdmData) {\r\n        let customData,\r\n            cdmData,\r\n            cdmDataBytes,\r\n            i;\r\n\r\n        checkConfig();\r\n        if (!_cdmData) return null;\r\n\r\n        // Convert custom data into multibyte string\r\n        customData = [];\r\n        for (i = 0; i < _cdmData.length; ++i) {\r\n            customData.push(_cdmData.charCodeAt(i));\r\n            customData.push(0);\r\n        }\r\n        customData = String.fromCharCode.apply(null, customData);\r\n\r\n        // Encode in Base 64 the custom data string\r\n        customData = BASE64.encode(customData);\r\n\r\n        // Initialize CDM data with Base 64 encoded custom data\r\n        // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\r\n        cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\r\n\r\n        // Convert CDM data into multibyte characters\r\n        cdmDataBytes = [];\r\n        for (i = 0; i < cdmData.length; ++i) {\r\n            cdmDataBytes.push(cdmData.charCodeAt(i));\r\n            cdmDataBytes.push(0);\r\n        }\r\n\r\n        return new Uint8Array(cdmDataBytes).buffer;\r\n    }\r\n\r\n    instance = {\r\n        uuid,\r\n        schemeIdURI,\r\n        systemString,\r\n        getInitData,\r\n        getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData,\r\n        getCDMData,\r\n        setPlayReadyMessageFormat\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CastLabs DRMToday License Server implementation\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\n\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction DRMToday(config) {\r\n\r\n    config = config || {};\r\n    const BASE64 = config.BASE64;\r\n\r\n    const keySystems = {};\r\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\r\n        responseType: 'json',\r\n        getLicenseMessage: function (response) {\r\n            return BASE64.decodeArray(response.license);\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return response;\r\n        }\r\n    };\r\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\r\n        responseType: 'arraybuffer',\r\n        getLicenseMessage: function (response) {\r\n            return response;\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return String.fromCharCode.apply(null, new Uint8Array(response));\r\n        }\r\n    };\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].responseType;\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\r\n        checkConfig();\r\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage,\r\n        getHTTPMethod,\r\n        getResponseType,\r\n        getLicenseMessage,\r\n        getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDRMToday.__dashjs_factory_name = 'DRMToday';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/* global escape: true */\r\n\r\n/**\r\n * Microsoft PlayReady Test License Server\r\n *\r\n * For testing content that uses the PlayReady test server at\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n * @ignore\r\n */\r\n\r\nfunction PlayReady() {\r\n\r\n    let instance;\r\n\r\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\r\n\r\n    function uintToString(arrayBuffer) {\r\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n\r\n    function parseServerResponse(serverResponse) {\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n\r\n            if (fault) {\r\n                return null;\r\n            }\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    function parseErrorResponse(serverResponse) {\r\n        let faultstring = '';\r\n        let statusCode = '';\r\n        let message = '';\r\n        let idStart = -1;\r\n        let idEnd = -1;\r\n\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\r\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\r\n            let node = null;\r\n\r\n            if (fault === null) {\r\n                return stringResponse;\r\n            }\r\n\r\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\r\n            faultstring = node ? node.nodeValue : null;\r\n\r\n            if (exception !== null) {\r\n                node = exception.getElementsByTagName('StatusCode')[0];\r\n                statusCode = node ? node.firstChild.nodeValue : null;\r\n                node = exception.getElementsByTagName('Message')[0];\r\n                message = node ? node.firstChild.nodeValue : null;\r\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\r\n                idEnd = message ? message.indexOf(']') : -1;\r\n                message = message ? message.substring(idStart, idEnd) : '';\r\n            }\r\n        }\r\n\r\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\r\n        if (message) {\r\n            errorString += `, message: ${message}`;\r\n        }\r\n\r\n        return errorString;\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseServerResponse.call(this, serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseErrorResponse.call(this, serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage,\r\n        getHTTPMethod,\r\n        getResponseType,\r\n        getLicenseMessage,\r\n        getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nPlayReady.__dashjs_factory_name = 'PlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction Widevine() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return serverResponse;\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage,\r\n        getHTTPMethod,\r\n        getResponseType,\r\n        getLicenseMessage,\r\n        getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nWidevine.__dashjs_factory_name = 'Widevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CableLabs ClearKey license server implementation\r\n *\r\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\r\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\n\r\nfunction ClearKey() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /* message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr*/) {\r\n        return 'json';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        if (!serverResponse.hasOwnProperty('keys')) {\r\n            return null;\r\n        }\r\n        let keyPairs = [];\r\n        for (let i = 0; i < serverResponse.keys.length; i++) {\r\n            let keypair = serverResponse.keys[i];\r\n            let keyid = keypair.kid.replace(/=/g, '');\r\n            let key = keypair.k.replace(/=/g, '');\r\n\r\n            keyPairs.push(new KeyPair(keyid, key));\r\n        }\r\n        return new ClearKeyKeySet(keyPairs);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage,\r\n        getHTTPMethod,\r\n        getResponseType,\r\n        getLicenseMessage,\r\n        getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nClearKey.__dashjs_factory_name = 'ClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport CommonEncryption from './../CommonEncryption';\r\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\r\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\r\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\r\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\r\nimport DRMToday from './../servers/DRMToday';\r\nimport PlayReady from './../servers/PlayReady';\r\nimport Widevine from './../servers/Widevine';\r\nimport ClearKey from './../servers/ClearKey';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\n/**\r\n * @module ProtectionKeyController\r\n * @ignore\r\n * @description Media protection key system functionality that can be modified/overridden by applications\r\n */\r\nfunction ProtectionKeyController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        debug,\r\n        logger,\r\n        keySystems,\r\n        BASE64,\r\n        clearkeyKeySystem,\r\n        clearkeyW3CKeySystem;\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.debug) {\r\n            debug = config.debug;\r\n            logger = debug.getLogger(instance);\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        keySystems = [];\r\n\r\n        let keySystem;\r\n\r\n        // PlayReady\r\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // Widevine\r\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // ClearKey\r\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n        clearkeyKeySystem = keySystem;\r\n\r\n        // W3C ClearKey\r\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\r\n        keySystems.push(keySystem);\r\n        clearkeyW3CKeySystem = keySystem;\r\n    }\r\n\r\n    /**\r\n     * Returns a prioritized list of key systems supported\r\n     * by this player (not necessarily those supported by the\r\n     * user agent)\r\n     *\r\n     * @returns {Array.<KeySystem>} a prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystems() {\r\n        return keySystems;\r\n    }\r\n\r\n    /**\r\n     * Sets the prioritized list of key systems to be supported\r\n     * by this player.\r\n     *\r\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function setKeySystems(newKeySystems) {\r\n        keySystems = newKeySystems;\r\n    }\r\n\r\n    /**\r\n     * Returns the key system associated with the given key system string\r\n     * name (i.e. 'org.w3.clearkey')\r\n     *\r\n     * @param {string} systemString the system string\r\n     * @returns {KeySystem|null} the key system\r\n     * or null if no supported key system is associated with the given key\r\n     * system string\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystemBySystemString(systemString) {\r\n        for (let i = 0; i < keySystems.length; i++) {\r\n            if (keySystems[i].systemString === systemString) {\r\n                return keySystems[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the given key system is ClearKey.  This is\r\n     * necessary because the EME spec defines ClearKey and its method\r\n     * for providing keys to the key session; and this method has changed\r\n     * between the various API versions.  Our EME-specific ProtectionModels\r\n     * must know if the system is ClearKey so that it can format the keys\r\n     * according to the particular spec version.\r\n     *\r\n     * @param {Object} keySystem the key\r\n     * @returns {boolean} true if this is the ClearKey key system, false\r\n     * otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function isClearKey(keySystem) {\r\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\r\n    }\r\n\r\n    /**\r\n     * Check equality of initData array buffers.\r\n     *\r\n     * @param {ArrayBuffer} initData1 - first initData\r\n     * @param {ArrayBuffer} initData2 - second initData\r\n     * @returns {boolean} true if the initData arrays are equal in size and\r\n     * contents, false otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function initDataEquals(initData1, initData2) {\r\n        if (initData1.byteLength === initData2.byteLength) {\r\n            let data1 = new Uint8Array(initData1);\r\n            let data2 = new Uint8Array(initData2);\r\n\r\n            for (let j = 0; j < data1.length; j++) {\r\n                if (data1[j] !== data2[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @param {string} default session type\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps, protDataSet, sessionType) {\r\n        let cp, ks, ksIdx, cpIdx;\r\n        let supportedKS = [];\r\n\r\n        if (cps) {\r\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\r\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n                ks = keySystems[ksIdx];\r\n\r\n                // Get protection data that applies for current key system\r\n                const protData = _getProtDataForKeySystem(ks.systemString, protDataSet);\r\n\r\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\r\n                    cp = cps[cpIdx];\r\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\r\n                        // Look for DRM-specific ContentProtection\r\n                        let initData = ks.getInitData(cp, cencContentProtection);\r\n\r\n                        supportedKS.push({\r\n                            ks: keySystems[ksIdx],\r\n                            keyId: cp.keyId,\r\n                            initData: initData,\r\n                            protData: protData,\r\n                            cdmData: ks.getCDMData(protData ? protData.cdmData : null),\r\n                            sessionId: _getSessionId(protData, cp),\r\n                            sessionType: _getSessionType(protData, sessionType)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns key systems supported by this player for the given PSSH\r\n     * initializationData. Key systems are returned in priority order\r\n     * (highest priority first)\r\n     *\r\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\r\n     * supported by the content\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @param {string} default session type\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromSegmentPssh(initData, protDataSet, sessionType) {\r\n        let supportedKS = [];\r\n        let pssh = CommonEncryption.parsePSSHList(initData);\r\n        let ks, keySystemString;\r\n\r\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n            ks = keySystems[ksIdx];\r\n            keySystemString = ks.systemString;\r\n\r\n            // Get protection data that applies for current key system\r\n            const protData = _getProtDataForKeySystem(keySystemString, protDataSet);\r\n\r\n            if (ks.uuid in pssh) {\r\n                supportedKS.push({\r\n                    ks: ks,\r\n                    initData: pssh[ks.uuid],\r\n                    protData: protData,\r\n                    cdmData: ks.getCDMData(protData ? protData.cdmData : null),\r\n                    sessionId: _getSessionId(protData),\r\n                    sessionType: _getSessionType(protData, sessionType)\r\n                });\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns the license server implementation data that should be used for this request.\r\n     *\r\n     * @param {KeySystem} keySystem the key system\r\n     * associated with this license request\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\r\n     * request.  Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @returns {LicenseServer|null} the license server\r\n     * implementation that should be used for this request or null if the player should not\r\n     * pass messages of the given type to a license server\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     *\r\n     */\r\n    function getLicenseServerModelInstance(keySystem, protData, messageType) {\r\n\r\n        // Our default server implementations do not do anything with \"license-release\" or\r\n        // \"individualization-request\" messages, so we just send a success event\r\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\r\n            return null;\r\n        }\r\n\r\n        let licenseServerData = null;\r\n        if (protData && protData.hasOwnProperty('drmtoday')) {\r\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\r\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\r\n            licenseServerData = Widevine(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\r\n            licenseServerData = PlayReady(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\r\n            licenseServerData = ClearKey(context).getInstance();\r\n        }\r\n\r\n        return licenseServerData;\r\n    }\r\n\r\n    /**\r\n     * Allows application-specific retrieval of ClearKey keys.\r\n     *\r\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {ArrayBuffer} message the key message from the CDM\r\n     * @return {ClearKeyKeySet|null} the clear keys associated with\r\n     * the request or null if no keys can be returned by this function\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\r\n        try {\r\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\r\n        } catch (error) {\r\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protectionDataSet) {\r\n        var getProtectionData = function (keySystemString) {\r\n            var protData = null;\r\n            if (protectionDataSet) {\r\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\r\n            }\r\n            return protData;\r\n        };\r\n\r\n        for (var i = 0; i < keySystems.length; i++) {\r\n            var keySystem = keySystems[i];\r\n            if (keySystem.hasOwnProperty('init')) {\r\n                keySystem.init(getProtectionData(keySystem.systemString));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getProtDataForKeySystem(systemString, protDataSet) {\r\n        if (!protDataSet) return null;\r\n        return (systemString in protDataSet) ? protDataSet[systemString] : null;\r\n    }\r\n\r\n    function _getSessionId(protData, cp) {\r\n        // Get sessionId from protectionData or from manifest (ContentProtection)\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function _getSessionType(protData, sessionType) {\r\n        return (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n    }\r\n\r\n    instance = {\r\n        initialize,\r\n        setProtectionData,\r\n        isClearKey,\r\n        initDataEquals,\r\n        getKeySystems,\r\n        setKeySystems,\r\n        getKeySystemBySystemString,\r\n        getSupportedKeySystemsFromContentProtection,\r\n        getSupportedKeySystemsFromSegmentPssh,\r\n        getLicenseServerModelInstance,\r\n        processClearKeyLicenseRequest,\r\n        setConfig\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n/**\r\n * @class\r\n  */\r\nclass ProtectionEvents extends EventsBase {\r\n    /**\r\n     * @description Public facing external events to be used when including protection package.\r\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\r\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\r\n     */\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         *\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one decryption keys has changed\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key has been added\r\n         *\r\n         * @constant\r\n         * @deprecated The latest versions of the EME specification no longer\r\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\r\n         * is preferred.\r\n         * @event ProtectionEvents#KEY_ADDED\r\n         */\r\n        this.KEY_ADDED = 'public_keyAdded';\r\n        /**\r\n         * Event ID for events delivered when an error is encountered by the CDM\r\n         * while processing a license server response message\r\n         * @event ProtectionEvents#KEY_ERROR\r\n         */\r\n        this.KEY_ERROR = 'public_keyError';\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         * @event ProtectionEvents#KEY_MESSAGE\r\n         */\r\n        this.KEY_MESSAGE = 'public_keyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session close\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\r\n         */\r\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key sessions creation\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CREATED\r\n         */\r\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session removal\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\r\n         */\r\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one or more\r\n         * decryption keys has changed\r\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\r\n         */\r\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system access procedure\r\n         * has completed\r\n         * @ignore\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\r\n         */\r\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when a license request procedure\r\n         * has completed\r\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\r\n         */\r\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\r\n\r\n        /**\r\n         * Sending a license rquest\r\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\r\n         */\r\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\r\n\r\n        /**\r\n         * Event ID for needkey/encrypted events\r\n         * @ignore\r\n         */\r\n        this.NEED_KEY = 'needkey';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is detected and created.\r\n         * @event ProtectionEvents#PROTECTION_CREATED\r\n         */\r\n        this.PROTECTION_CREATED = 'public_protectioncreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is destroyed.\r\n         * @event ProtectionEvents#PROTECTION_DESTROYED\r\n         */\r\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new server certificate has\r\n         * been delivered to the CDM\r\n         * @ignore\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the process of shutting down\r\n         * a protection set has completed\r\n         * @ignore\r\n         */\r\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a HTMLMediaElement has been\r\n         * associated with the protection set\r\n         * @ignore\r\n         */\r\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\r\n\r\n        /**\r\n         * Triggered when the key session has been updated successfully\r\n         * @ignore\r\n         */\r\n        this.KEY_SESSION_UPDATED = 'public_keySessionUpdated';\r\n    }\r\n}\r\n\r\nlet protectionEvents = new ProtectionEvents();\r\nexport default protectionEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc NeedKey\r\n * @ignore\r\n */\r\nclass NeedKey {\r\n    /**\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {string} initDataType initialization data type\r\n     * @class\r\n     */\r\n    constructor(initData, initDataType) {\r\n        this.initData = initData;\r\n        this.initDataType = initDataType;\r\n    }\r\n}\r\n\r\nexport default NeedKey;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc EME-independent KeyMessage\r\n * @ignore\r\n */\r\nclass KeyMessage {\r\n    /**\r\n     * @param {SessionToken} sessionToken the session\r\n     * to which the key message is associated\r\n     * @param {ArrayBuffer} message the key message\r\n     * @param {string} defaultURL license acquisition URL provided by the CDM\r\n     * @param {string} messageType Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @class\r\n     */\r\n    constructor(sessionToken, message, defaultURL, messageType) {\r\n        this.sessionToken = sessionToken;\r\n        this.message = message;\r\n        this.defaultURL = defaultURL;\r\n        this.messageType = messageType ? messageType : 'license-request';\r\n    }\r\n}\r\n\r\nexport default KeyMessage;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Creates a new key system access token.  Represents a valid key system for\r\n * given piece of content and key system requirements.  Used to initialize license\r\n * acquisition operations.\r\n * @ignore\r\n */\r\nclass KeySystemAccess {\r\n    /**\r\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\r\n     * @param {KeySystemConfiguration} ksConfiguration the\r\n     * subset of configurations passed to the key system access request that are supported\r\n     * by this user agent\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keySystem, ksConfiguration) {\r\n        this.keySystem = keySystem;\r\n        this.ksConfiguration = ksConfiguration;\r\n    }\r\n}\r\n\r\nexport default KeySystemAccess;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Most recent EME implementation\r\n *\r\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst SYSTEM_STRING_PRIORITY = {};\r\nSYSTEM_STRING_PRIORITY[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = [ProtectionConstants.PLAYREADY_KEYSTEM_STRING, ProtectionConstants.PLAYREADY_RECOMMENDATION_KEYSTEM_STRING];\r\nSYSTEM_STRING_PRIORITY[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = [ProtectionConstants.WIDEVINE_KEYSTEM_STRING];\r\nSYSTEM_STRING_PRIORITY[ProtectionConstants.CLEARKEY_KEYSTEM_STRING] = [ProtectionConstants.CLEARKEY_KEYSTEM_STRING];\r\n\r\nfunction ProtectionModel_21Jan2015(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        keySystem,\r\n        videoElement,\r\n        mediaKeys,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        keySystem = null;\r\n        videoElement = null;\r\n        mediaKeys = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        const numSessions = sessions.length;\r\n        let session;\r\n\r\n        if (numSessions !== 0) {\r\n            // Called when we are done closing a session.  Success or fail\r\n            const done = function (session) {\r\n                removeSession(session);\r\n                if (sessions.length === 0) {\r\n                    if (videoElement) {\r\n                        videoElement.removeEventListener('encrypted', eventHandler);\r\n                        videoElement.setMediaKeys(null).then(function () {\r\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                        });\r\n                    } else {\r\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                    }\r\n                }\r\n            };\r\n            for (let i = 0; i < numSessions; i++) {\r\n                session = sessions[i];\r\n                (function (s) {\r\n                    // Override closed promise resolver\r\n                    session.session.closed.then(function () {\r\n                        done(s);\r\n                    });\r\n                    // Close the session and handle errors, otherwise promise\r\n                    // resolver above will be called\r\n                    _closeKeySessionInternal(session).catch(function () {\r\n                        done(s);\r\n                    });\r\n\r\n                })(session);\r\n            }\r\n        } else {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        }\r\n    }\r\n\r\n    function stop() {\r\n        // Close and remove not usable sessions\r\n        let session;\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            session = sessions[i];\r\n            if (!session.getUsable()) {\r\n                _closeKeySessionInternal(session).catch(function () {\r\n                    removeSession(session);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i].initData) {\r\n                retVal.push(sessions[i].initData);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function getSessions() {\r\n        return sessions;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        return new Promise((resolve, reject) => {\r\n            _requestKeySystemAccessInternal(ksConfigurations, 0, resolve, reject);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initializes access to a key system. Once we found a valid configuration we get a mediaKeySystemAccess object\r\n     * @param ksConfigurations\r\n     * @param idx\r\n     * @param resolve\r\n     * @param reject\r\n     * @private\r\n     */\r\n    function _requestKeySystemAccessInternal(ksConfigurations, idx, resolve, reject) {\r\n\r\n        // In case requestMediaKeySystemAccess is not available we can not proceed and dispatch an error\r\n        if (navigator.requestMediaKeySystemAccess === undefined ||\r\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\r\n            const msg = 'Insecure origins are not allowed';\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: msg});\r\n            reject({error: msg});\r\n            return;\r\n        }\r\n\r\n        // If a systemStringPriority is defined by the application we use these values. Otherwise we use the default system string\r\n        // This is useful for DRM systems such as Playready for which multiple system strings are possible for instance com.microsoft.playready and com.microsoft.playready.recommendation\r\n        const protDataSystemStringPriority = ksConfigurations[idx].protData && ksConfigurations[idx].protData.systemStringPriority ? ksConfigurations[idx].protData.systemStringPriority : null;\r\n        const configs = ksConfigurations[idx].configs;\r\n        const currentKeySystem = ksConfigurations[idx].ks;\r\n        let systemString = currentKeySystem.systemString;\r\n\r\n        // Use the default values in case no values are provided by the application\r\n        const systemStringsToApply = protDataSystemStringPriority ? protDataSystemStringPriority : SYSTEM_STRING_PRIORITY[systemString] ? SYSTEM_STRING_PRIORITY[systemString] : [systemString];\r\n\r\n        // Check all the available system strings and the available configurations for support\r\n        _checkAccessForKeySystem(systemStringsToApply, configs)\r\n            .then((mediaKeySystemAccess) => {\r\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\r\n                    mediaKeySystemAccess.getConfiguration() : null;\r\n                const keySystemAccess = new KeySystemAccess(currentKeySystem, configuration);\r\n\r\n                keySystemAccess.mksa = mediaKeySystemAccess;\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\r\n                resolve({data: keySystemAccess});\r\n            })\r\n            .catch((e) => {\r\n                if (idx + 1 < ksConfigurations.length) {\r\n                    _requestKeySystemAccessInternal(ksConfigurations, idx + 1, resolve, reject);\r\n                } else {\r\n                    const errorMessage = 'Key system access denied! ';\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: errorMessage + e.message});\r\n                    reject({error: errorMessage + e.message});\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * For a specific key system: Iterate over the possible system strings and resolve once a valid configuration was found\r\n     * @param {array} systemStringsToApply\r\n     * @param {object} configs\r\n     * @return {Promise}\r\n     * @private\r\n     */\r\n    function _checkAccessForKeySystem(systemStringsToApply, configs) {\r\n        return new Promise((resolve, reject) => {\r\n            _checkAccessForSystemStrings(systemStringsToApply, configs, 0, resolve, reject);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Recursively iterate over the possible system strings until a supported configuration is found or we ran out of options\r\n     * @param {array} systemStringsToApply\r\n     * @param {object} configs\r\n     * @param {number} idx\r\n     * @param {function} resolve\r\n     * @param {function} reject\r\n     * @private\r\n     */\r\n    function _checkAccessForSystemStrings(systemStringsToApply, configs, idx, resolve, reject) {\r\n        const systemString = systemStringsToApply[idx];\r\n\r\n        logger.debug(`Requesting key system access for system string ${systemString}`);\r\n\r\n        navigator.requestMediaKeySystemAccess(systemString, configs)\r\n            .then((mediaKeySystemAccess) => {\r\n                mediaKeySystemAccess.selectedSystemString = systemString;\r\n                resolve(mediaKeySystemAccess);\r\n            })\r\n            .catch((e) => {\r\n                if (idx + 1 < systemStringsToApply.length) {\r\n                    _checkAccessForSystemStrings(systemStringsToApply, configs, idx + 1, resolve, reject);\r\n                } else {\r\n                    reject(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Selects a key system by creating the mediaKeys and adding them to the video element\r\n     * @param keySystemAccess\r\n     * @return {Promise<unknown>}\r\n     */\r\n    function selectKeySystem(keySystemAccess) {\r\n        return new Promise((resolve, reject) => {\r\n            keySystemAccess.mksa.createMediaKeys()\r\n                .then((mkeys) => {\r\n                    keySystem = keySystemAccess.keySystem;\r\n                    mediaKeys = mkeys;\r\n                    if (videoElement) {\r\n                        return videoElement.setMediaKeys(mediaKeys)\r\n                    } else {\r\n                        return Promise.resolve();\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    resolve(keySystem);\r\n                })\r\n                .catch(function () {\r\n                    reject({error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\r\n                });\r\n        })\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys) {\r\n                videoElement.setMediaKeys(null);\r\n            }\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys && mediaKeys) {\r\n                videoElement.setMediaKeys(mediaKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(serverCertificate) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not set server certificate until you have selected a key system');\r\n        }\r\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\r\n            logger.info('DRM: License server certificate successfully updated.');\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\r\n        }).catch(function (error) {\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a key session, a session token and initialize a request by calling generateRequest\r\n     * @param ksInfo\r\n     */\r\n    function createKeySession(ksInfo) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        const session = mediaKeys.createSession(ksInfo.sessionType);\r\n        const sessionToken = createSessionToken(session, ksInfo);\r\n\r\n\r\n        // The \"keyids\" type is used for Clearkey when keys are provided directly in the protection data and a request to a license server is not needed\r\n        const dataType = keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (ksInfo.initData || (ksInfo.protData && ksInfo.protData.clearkeys)) ? ProtectionConstants.INITIALIZATION_DATA_TYPE_KEYIDS : ProtectionConstants.INITIALIZATION_DATA_TYPE_CENC;\r\n\r\n        session.generateRequest(dataType, ksInfo.initData).then(function () {\r\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionId());\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\r\n        }).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        // Send our request to the key session\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            message = message.toJWK();\r\n        }\r\n        session.update(message)\r\n            .then(() => {\r\n                eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n            })\r\n            .catch(function (error) {\r\n                eventBus.trigger(events.KEY_ERROR, {error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\r\n            });\r\n    }\r\n\r\n    function loadKeySession(ksInfo) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not load sessions until you have selected a key system');\r\n        }\r\n\r\n        const sessionId = ksInfo.sessionId;\r\n\r\n        // Check if session Id is not already loaded or loading\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessionId === sessions[i].sessionId) {\r\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const session = mediaKeys.createSession(ksInfo.sessionType);\r\n        const sessionToken = createSessionToken(session, ksInfo);\r\n\r\n        // Load persisted session data into our newly created session object\r\n        session.load(sessionId).then(function (success) {\r\n            if (success) {\r\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionId());\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\r\n            } else {\r\n                removeSession(sessionToken);\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionId + ')')\r\n                });\r\n            }\r\n        }).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionId + ')! ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function removeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        session.remove().then(function () {\r\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionId());\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionId()});\r\n        }, function (error) {\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\r\n                data: null,\r\n                error: 'Error removing session (' + sessionToken.getSessionId() + '). ' + error.name\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the key session\r\n        _closeKeySessionInternal(sessionToken).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\r\n                data: null,\r\n                error: 'Error closing session (' + sessionToken.getSessionId() + ') ' + error.name\r\n            });\r\n        });\r\n    }\r\n\r\n    function _closeKeySessionInternal(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener('keystatuseschange', sessionToken);\r\n        session.removeEventListener('message', sessionToken);\r\n\r\n        // Send our request to the key session\r\n        return session.close();\r\n    }\r\n\r\n    // This is our main event handler for all desired HTMLMediaElement events\r\n    // related to EME.  These events are translated into our API-independent\r\n    // versions of the same events\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'encrypted':\r\n                        if (event.initData) {\r\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function removeSession(token) {\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === token) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function parseKeyStatus(args) {\r\n        // Edge and Chrome implement different version of keystatues, param are not on same order\r\n        let status, keyId;\r\n        if (args && args.length > 0) {\r\n            if (args[0]) {\r\n                if (typeof args[0] === 'string') {\r\n                    status = args[0];\r\n                } else {\r\n                    keyId = args[0];\r\n                }\r\n            }\r\n\r\n            if (args[1]) {\r\n                if (typeof args[1] === 'string') {\r\n                    status = args[1];\r\n                } else {\r\n                    keyId = args[1];\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            status: status,\r\n            keyId: keyId\r\n        };\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(session, ksInfo) {\r\n        const token = { // Implements SessionToken\r\n            session: session,\r\n            keyId: ksInfo.keyId,\r\n            initData: ksInfo.initData,\r\n            sessionId: ksInfo.sessionId,\r\n            sessionType: ksInfo.sessionType,\r\n\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'keystatuseschange':\r\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\r\n                        event.target.keyStatuses.forEach(function () {\r\n                            let keyStatus = parseKeyStatus(arguments);\r\n                            switch (keyStatus.status) {\r\n                                case 'expired':\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});\r\n                                    break;\r\n                                default:\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\r\n                                    break;\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'message':\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\r\n                        break;\r\n                }\r\n            },\r\n\r\n            getKeyId: function () {\r\n                return this.keyId;\r\n            },\r\n\r\n            getSessionId: function () {\r\n                return session.sessionId;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return this.sessionType;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return session.expiration;\r\n            },\r\n\r\n            getKeyStatuses: function () {\r\n                return session.keyStatuses;\r\n            },\r\n\r\n            getUsable: function () {\r\n                let usable = false;\r\n                session.keyStatuses.forEach(function () {\r\n                    let keyStatus = parseKeyStatus(arguments);\r\n                    if (keyStatus.status === 'usable') {\r\n                        usable = true;\r\n                    }\r\n                });\r\n                return usable;\r\n            }\r\n        };\r\n\r\n        // Add all event listeners\r\n        session.addEventListener('keystatuseschange', token);\r\n        session.addEventListener('message', token);\r\n\r\n        // Register callback for session closed Promise\r\n        session.closed.then(() => {\r\n            removeSession(token);\r\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionId());\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionId()});\r\n        });\r\n\r\n        // Add to our session list\r\n        sessions.push(token);\r\n\r\n        return token;\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData,\r\n        getSessions,\r\n        requestKeySystemAccess,\r\n        selectKeySystem,\r\n        setMediaElement,\r\n        setServerCertificate,\r\n        createKeySession,\r\n        updateKeySession,\r\n        loadKeySession,\r\n        removeKeySession,\r\n        closeKeySession,\r\n        stop,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\r\n *\r\n * Implemented by Internet Explorer 11 (Windows 8.1)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\n\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\n\r\nfunction ProtectionModel_3Feb2014(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        mediaKeys,\r\n        keySystemAccess,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        mediaKeys = null;\r\n        keySystemAccess = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        try {\r\n            for (let i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            if (videoElement) {\r\n                videoElement.removeEventListener(api.needkey, eventHandler);\r\n            }\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        } catch (error) {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\r\n        }\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function getSessions() {\r\n        return sessions;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        return new Promise((resolve, reject) => {\r\n            // Try key systems in order, first one with supported key system configuration\r\n            // is used\r\n            let found = false;\r\n            for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n                const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n                const configs = ksConfigurations[ksIdx].configs;\r\n                let supportedAudio = null;\r\n                let supportedVideo = null;\r\n\r\n                // Try key system configs in order, first one with supported audio/video\r\n                // is used\r\n                for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                    const audios = configs[configIdx].audioCapabilities;\r\n                    const videos = configs[configIdx].videoCapabilities;\r\n\r\n                    // Look for supported audio container/codecs\r\n                    if (audios && audios.length !== 0) {\r\n                        supportedAudio = []; // Indicates that we have a requested audio config\r\n                        for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\r\n                            if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\r\n                                supportedAudio.push(audios[audioIdx]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Look for supported video container/codecs\r\n                    if (videos && videos.length !== 0) {\r\n                        supportedVideo = []; // Indicates that we have a requested video config\r\n                        for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                            if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\r\n                                supportedVideo.push(videos[videoIdx]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // No supported audio or video in this configuration OR we have\r\n                    // requested audio or video configuration that is not supported\r\n                    if ((!supportedAudio && !supportedVideo) ||\r\n                        (supportedAudio && supportedAudio.length === 0) ||\r\n                        (supportedVideo && supportedVideo.length === 0)) {\r\n                        continue;\r\n                    }\r\n\r\n                    // This configuration is supported\r\n                    found = true;\r\n                    const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                    const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                    const keySystemAccess = new KeySystemAccess(ks, ksConfig);\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\r\n                    resolve({ data: keySystemAccess });\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                const errorMessage = 'Key system access denied! -- No valid audio/video content configurations detected!';\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: errorMessage });\r\n                reject({ error: errorMessage });\r\n            }\r\n        })\r\n    }\r\n\r\n    function selectKeySystem(ksAccess) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\r\n                keySystem = ksAccess.keySystem;\r\n                keySystemAccess = ksAccess;\r\n                if (videoElement) {\r\n                    setMediaKeys();\r\n                }\r\n                resolve(keySystem);\r\n            } catch (error) {\r\n                reject({ error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n            }\r\n        })\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener(api.needkey, eventHandler);\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            if (mediaKeys) {\r\n                setMediaKeys();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createKeySession(ksInfo) {\r\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Use the first video capability for the contentType.\r\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\r\n\r\n        // If player is trying to playback Audio only stream - don't error out.\r\n        let capabilities = null;\r\n\r\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null) {\r\n            throw new Error('Can not create sessions for unknown content types.');\r\n        }\r\n\r\n        const contentType = capabilities.contentType;\r\n        const session = mediaKeys.createSession(contentType, new Uint8Array(ksInfo.initData), ksInfo.cdmData ? new Uint8Array(ksInfo.cdmData) : null);\r\n        const sessionToken = createSessionToken(session, ksInfo);\r\n\r\n        // Add all event listeners\r\n        session.addEventListener(api.error, sessionToken);\r\n        session.addEventListener(api.message, sessionToken);\r\n        session.addEventListener(api.ready, sessionToken);\r\n        session.addEventListener(api.close, sessionToken);\r\n\r\n        // Add to our session list\r\n        sessions.push(sessionToken);\r\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionId());\r\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the key session\r\n            session.update(new Uint8Array(message));\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            session.update(new Uint8Array(message.toJWK()));\r\n        }\r\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n    }\r\n\r\n    /**\r\n     * Close the given session and release all associated keys.  Following\r\n     * this call, the sessionToken becomes invalid\r\n     *\r\n     * @param {Object} sessionToken - the session token\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener(api.error, sessionToken);\r\n        session.removeEventListener(api.message, sessionToken);\r\n        session.removeEventListener(api.ready, sessionToken);\r\n        session.removeEventListener(api.close, sessionToken);\r\n\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === sessionToken) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Send our request to the key session\r\n        session[api.release]();\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */\r\n    }\r\n\r\n    function loadKeySession(/*ksInfo*/) { /* Not supported */\r\n    }\r\n\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */\r\n    }\r\n\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n\r\n                    case api.needkey:\r\n                        if (event.initData) {\r\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    // IE11 does not let you set MediaKeys until it has entered a certain\r\n    // readyState, so we need this logic to ensure we don't set the keys\r\n    // too early\r\n    function setMediaKeys() {\r\n        let boundDoSetKeys = null;\r\n        const doSetKeys = function () {\r\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\r\n            videoElement[api.setMediaKeys](mediaKeys);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        };\r\n        if (videoElement.readyState >= 1) {\r\n            doSetKeys();\r\n        } else {\r\n            boundDoSetKeys = doSetKeys.bind(this);\r\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(keySession, ksInfo) {\r\n        return {\r\n            // Implements SessionToken\r\n            session: keySession,\r\n            keyId: ksInfo.keyId,\r\n            initData: ksInfo.initData,\r\n\r\n            getKeyId: function () {\r\n                return this.keyId;\r\n            },\r\n\r\n            getSessionId: function () {\r\n                return this.session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return NaN;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return 'temporary';\r\n            },\r\n\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case api.error:\r\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\r\n                        eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\r\n                        break;\r\n                    case api.message:\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\r\n                        break;\r\n                    case api.ready:\r\n                        logger.debug('DRM: Key added.');\r\n                        eventBus.trigger(events.KEY_ADDED);\r\n                        break;\r\n\r\n                    case api.close:\r\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionId());\r\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionId() });\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData,\r\n        getSessions,\r\n        requestKeySystemAccess,\r\n        selectKeySystem,\r\n        setMediaElement,\r\n        createKeySession,\r\n        updateKeySession,\r\n        closeKeySession,\r\n        setServerCertificate,\r\n        loadKeySession,\r\n        removeKeySession,\r\n        stop: reset,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Initial implementation of EME\r\n *\r\n * Implemented by Google Chrome prior to v36\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\n\r\nfunction ProtectionModel_01b(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        protectionKeyController,\r\n\r\n        // With this version of the EME APIs, sessionIds are not assigned to\r\n        // sessions until the first key message is received.  We are assuming\r\n        // that in the case of multiple sessions, key messages will be received\r\n        // in the order that generateKeyRequest() is called.\r\n        // Holding spot for newly-created sessions until we determine whether or\r\n        // not the CDM supports sessionIds\r\n        pendingSessions,\r\n\r\n        // List of sessions that have been initialized.  Only the first position will\r\n        // be used in the case that the CDM does not support sessionIds\r\n        sessions,\r\n\r\n        // Not all CDMs support the notion of sessionIds.  Without sessionIds\r\n        // there is no way for us to differentiate between sessions, therefore\r\n        // we must only allow a single session.  Once we receive the first key\r\n        // message we can set this flag to determine if more sessions are allowed\r\n        moreSessionsAllowed,\r\n\r\n        // This is our main event handler for all desired HTMLMediaElement events\r\n        // related to EME.  These events are translated into our API-independent\r\n        // versions of the same events\r\n        eventHandler;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        pendingSessions = [];\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            closeKeySession(sessions[i]);\r\n        }\r\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < pendingSessions.length; i++) {\r\n            retVal.push(pendingSessions[i].initData);\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function getSessions() {\r\n        return sessions.concat(pendingSessions);\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        return new Promise((resolve, reject) => {\r\n            let ve = videoElement;\r\n            if (!ve) { // Must have a video element to do this capability tests\r\n                ve = document.createElement('video');\r\n            }\r\n\r\n            // Try key systems in order, first one with supported key system configuration\r\n            // is used\r\n            let found = false;\r\n            for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n                const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n                const configs = ksConfigurations[ksIdx].configs;\r\n                let supportedAudio = null;\r\n                let supportedVideo = null;\r\n\r\n                // Try key system configs in order, first one with supported audio/video\r\n                // is used\r\n                for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                    //let audios = configs[configIdx].audioCapabilities;\r\n                    const videos = configs[configIdx].videoCapabilities;\r\n                    // Look for supported video container/codecs\r\n                    if (videos && videos.length !== 0) {\r\n                        supportedVideo = []; // Indicates that we have a requested video config\r\n                        for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                            if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\r\n                                supportedVideo.push(videos[videoIdx]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // No supported audio or video in this configuration OR we have\r\n                    // requested audio or video configuration that is not supported\r\n                    if ((!supportedAudio && !supportedVideo) ||\r\n                        (supportedAudio && supportedAudio.length === 0) ||\r\n                        (supportedVideo && supportedVideo.length === 0)) {\r\n                        continue;\r\n                    }\r\n\r\n                    // This configuration is supported\r\n                    found = true;\r\n                    const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                    const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                    const keySystemAccess = new KeySystemAccess(ks, ksConfig)\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\r\n                    resolve({ data: keySystemAccess });\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                const errorMessage = 'Key system access denied! -- No valid audio/video content configurations detected!';\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: errorMessage });\r\n                reject({ error: errorMessage });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystem = keySystemAccess.keySystem;\r\n        return Promise.resolve(keySystem);\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement) {\r\n            return;\r\n        }\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n\r\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\r\n            for (var i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            sessions = [];\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.keyerror, eventHandler);\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            videoElement.addEventListener(api.keymessage, eventHandler);\r\n            videoElement.addEventListener(api.keyadded, eventHandler);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        }\r\n    }\r\n\r\n    function createKeySession(ksInfo) {\r\n        if (!keySystem) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Determine if creating a new session is allowed\r\n        if (moreSessionsAllowed || sessions.length === 0) {\r\n            const newSession = { // Implements SessionToken\r\n                sessionId: null,\r\n                keyId: ksInfo.keyId,\r\n                initData: ksInfo.initData,\r\n\r\n                getKeyId: function () {\r\n                    return this.keyId;\r\n                },\r\n\r\n                getSessionId: function () {\r\n                    return this.sessionId;\r\n                },\r\n\r\n                getExpirationTime: function () {\r\n                    return NaN;\r\n                },\r\n\r\n                getSessionType: function () {\r\n                    return 'temporary';\r\n                }\r\n            };\r\n            pendingSessions.push(newSession);\r\n\r\n            // Send our request to the CDM\r\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(ksInfo.initData));\r\n\r\n            return newSession;\r\n\r\n        } else {\r\n            throw new Error('Multiple sessions not allowed!');\r\n        }\r\n\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const sessionId = sessionToken.sessionId;\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the CDM\r\n            videoElement[api.addKey](keySystem.systemString,\r\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionId);\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            for (let i = 0; i < message.keyPairs.length; i++) {\r\n                videoElement[api.addKey](keySystem.systemString,\r\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionId);\r\n            }\r\n        }\r\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the CDM\r\n        try {\r\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionId);\r\n        } catch (error) {\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\r\n                data: null,\r\n                error: 'Error closing session (' + sessionToken.sessionId + ') ' + error.message\r\n            });\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */\r\n    }\r\n\r\n    function loadKeySession(/*ksInfo*/) { /* Not supported */\r\n    }\r\n\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */\r\n    }\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                let sessionToken = null;\r\n                switch (event.type) {\r\n                    case api.needkey:\r\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        break;\r\n\r\n                    case api.keyerror:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\r\n                            let msg = '';\r\n                            switch (event.errorCode.code) {\r\n                                case 1:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\r\n                                    break;\r\n                                case 2:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\r\n                                    break;\r\n                                case 3:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\r\n                                    break;\r\n                                case 4:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\r\n                                    break;\r\n                                case 5:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\r\n                                    break;\r\n                                case 6:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\r\n                                    break;\r\n                            }\r\n                            msg += '  System Code = ' + event.systemCode;\r\n                            // TODO: Build error string based on key error\r\n                            eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(code, msg, sessionToken) });\r\n                        } else {\r\n                            logger.error('No session token found for key error');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keyadded:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            logger.debug('DRM: Key added.');\r\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\r\n                        } else {\r\n                            logger.debug('No session token found for key added');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keymessage:\r\n                        // If this CDM does not support session IDs, we will be limited\r\n                        // to a single session\r\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\r\n\r\n                        // SessionIDs supported\r\n                        if (moreSessionsAllowed) {\r\n                            // Attempt to find an uninitialized token with this sessionId\r\n                            sessionToken = findSessionByID(sessions, event.sessionId);\r\n                            if (!sessionToken && pendingSessions.length > 0) {\r\n\r\n                                // This is the first message for our latest session, so set the\r\n                                // sessionId and add it to our list\r\n                                sessionToken = pendingSessions.shift();\r\n                                sessions.push(sessionToken);\r\n                                sessionToken.sessionId = event.sessionId;\r\n\r\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n                            }\r\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\r\n                            sessionToken = pendingSessions.shift();\r\n                            sessions.push(sessionToken);\r\n\r\n                            if (pendingSessions.length !== 0) {\r\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\r\n                            }\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n\r\n                            // For ClearKey, the spec mandates that you pass this message to the\r\n                            // addKey method, so we always save it to the token since there is no\r\n                            // way to tell which key system is in use\r\n                            sessionToken.keyMessage = message;\r\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\r\n\r\n                        } else {\r\n                            logger.warn('No session token found for key message');\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper function to retrieve the stored session token based on a given\r\n     * sessionId value\r\n     *\r\n     * @param {Array} sessionArray - the array of sessions to search\r\n     * @param {*} sessionId - the sessionId to search for\r\n     * @returns {*} the session token with the given sessionId\r\n     */\r\n    function findSessionByID(sessionArray, sessionId) {\r\n        if (!sessionId || !sessionArray) {\r\n            return null;\r\n        } else {\r\n            const len = sessionArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                if (sessionArray[i].sessionId == sessionId) {\r\n                    return sessionArray[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function removeEventListeners() {\r\n        videoElement.removeEventListener(api.keyerror, eventHandler);\r\n        videoElement.removeEventListener(api.needkey, eventHandler);\r\n        videoElement.removeEventListener(api.keymessage, eventHandler);\r\n        videoElement.removeEventListener(api.keyadded, eventHandler);\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData,\r\n        getSessions,\r\n        requestKeySystemAccess,\r\n        selectKeySystem,\r\n        setMediaElement,\r\n        createKeySession,\r\n        updateKeySession,\r\n        closeKeySession,\r\n        setServerCertificate,\r\n        loadKeySession,\r\n        removeKeySession,\r\n        stop: reset,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ProtectionController from './controllers/ProtectionController';\r\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\r\nimport ProtectionEvents from './ProtectionEvents';\r\nimport ProtectionErrors from './errors/ProtectionErrors';\r\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\r\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\r\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\r\n\r\nconst APIS_ProtectionModel_01b = [\r\n    // Un-prefixed as per spec\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'generateKeyRequest',\r\n        addKey: 'addKey',\r\n        cancelKeyRequest: 'cancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        keyerror: 'keyerror',\r\n        keyadded: 'keyadded',\r\n        keymessage: 'keymessage'\r\n    },\r\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'webkitGenerateKeyRequest',\r\n        addKey: 'webkitAddKey',\r\n        cancelKeyRequest: 'webkitCancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'webkitneedkey',\r\n        keyerror: 'webkitkeyerror',\r\n        keyadded: 'webkitkeyadded',\r\n        keymessage: 'webkitkeymessage'\r\n    }\r\n];\r\n\r\nconst APIS_ProtectionModel_3Feb2014 = [\r\n    // Un-prefixed as per spec\r\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'setMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        error: 'keyerror',\r\n        message: 'keymessage',\r\n        ready: 'keyadded',\r\n        close: 'keyclose'\r\n    },\r\n    // MS-prefixed (IE11, Windows 8.1)\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'msSetMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MSMediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n        // Events\r\n        needkey: 'msneedkey',\r\n        error: 'mskeyerror',\r\n        message: 'mskeymessage',\r\n        ready: 'mskeyadded',\r\n        close: 'mskeyclose'\r\n    }\r\n];\r\n\r\nfunction Protection() {\r\n    let instance;\r\n    const context = this.context;\r\n\r\n    /**\r\n     * Create a ProtectionController and associated ProtectionModel for use with\r\n     * a single piece of content.\r\n     *\r\n     * @param {Object} config\r\n     * @return {ProtectionController} protection controller\r\n     *\r\n     */\r\n    function createProtectionSystem(config) {\r\n        let controller = null;\r\n\r\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\r\n        protectionKeyController.initialize();\r\n\r\n        let protectionModel =  _getProtectionModel(config);\r\n\r\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\r\n            controller = ProtectionController(context).create({\r\n                protectionModel: protectionModel,\r\n                protectionKeyController: protectionKeyController,\r\n                eventBus: config.eventBus,\r\n                debug: config.debug,\r\n                events: config.events,\r\n                BASE64: config.BASE64,\r\n                constants: config.constants,\r\n                cmcdModel: config.cmcdModel,\r\n                settings: config.settings\r\n            });\r\n            config.capabilities.setEncryptedMediaSupported(true);\r\n        }\r\n        return controller;\r\n    }\r\n\r\n    function _getProtectionModel(config) {\r\n        const debug = config.debug;\r\n        const logger = debug.getLogger(instance);\r\n        const eventBus = config.eventBus;\r\n        const errHandler = config.errHandler;\r\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\r\n\r\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\r\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\r\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\r\n        } else if (_getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\r\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: _getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\r\n        } else if (_getAPI(videoElement, APIS_ProtectionModel_01b)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\r\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: _getAPI(videoElement, APIS_ProtectionModel_01b) });\r\n        } else {\r\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getAPI(videoElement, apis) {\r\n        for (let i = 0; i < apis.length; i++) {\r\n            const api = apis[i];\r\n            // detect if api is supported by browser\r\n            // check only first function in api -> should be fine\r\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\r\n                continue;\r\n            }\r\n\r\n            return api;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        createProtectionSystem\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtection.__dashjs_factory_name = 'Protection';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\r\nfactory.events = ProtectionEvents;\r\nfactory.errors = ProtectionErrors;\r\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DashJSError {\r\n    constructor(code, message, data) {\r\n        this.code = code || null;\r\n        this.message = message || null;\r\n        this.data = data || null;\r\n    }\r\n}\r\n\r\nexport default DashJSError;"],"sourceRoot":""}